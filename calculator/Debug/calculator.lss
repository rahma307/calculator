
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  000036ca  0000373e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002acc  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fbf  00000000  00000000  00006390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  0000734f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020e  00000000  00000000  0000750f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  0000771d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  00009da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  0000b279  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000c524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  0000c704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000c9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c9 10 	call	0x2192	; 0x2192 <main>
      7a:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab eb       	ldi	r26, 0xBB	; 187
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b eb       	ldi	r24, 0xBB	; 187
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b eb       	ldi	r22, 0xBB	; 187
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

000008fa <__floatsisf>:
     8fa:	a8 e0       	ldi	r26, 0x08	; 8
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x12>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	da 01       	movw	r26, r20
     910:	c9 01       	movw	r24, r18
     912:	88 27       	eor	r24, r24
     914:	b7 fd       	sbrc	r27, 7
     916:	83 95       	inc	r24
     918:	99 27       	eor	r25, r25
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	b8 2e       	mov	r11, r24
     920:	21 15       	cp	r18, r1
     922:	31 05       	cpc	r19, r1
     924:	41 05       	cpc	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	19 f4       	brne	.+6      	; 0x930 <__floatsisf+0x36>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	3a c0       	rjmp	.+116    	; 0x9a4 <__floatsisf+0xaa>
     930:	88 23       	and	r24, r24
     932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x64>
     934:	20 30       	cpi	r18, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	38 07       	cpc	r19, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	48 07       	cpc	r20, r24
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	58 07       	cpc	r21, r24
     942:	29 f4       	brne	.+10     	; 0x94e <__floatsisf+0x54>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9f ec       	ldi	r25, 0xCF	; 207
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <__floatsisf+0xb4>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	e2 1a       	sub	r14, r18
     956:	f3 0a       	sbc	r15, r19
     958:	04 0b       	sbc	r16, r20
     95a:	15 0b       	sbc	r17, r21
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__floatsisf+0x68>
     95e:	79 01       	movw	r14, r18
     960:	8a 01       	movw	r16, r20
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	c8 2e       	mov	r12, r24
     966:	d1 2c       	mov	r13, r1
     968:	dc 82       	std	Y+4, r13	; 0x04
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	ed 82       	std	Y+5, r14	; 0x05
     96e:	fe 82       	std	Y+6, r15	; 0x06
     970:	0f 83       	std	Y+7, r16	; 0x07
     972:	18 87       	std	Y+8, r17	; 0x08
     974:	c8 01       	movw	r24, r16
     976:	b7 01       	movw	r22, r14
     978:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__clzsi2>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	84 f4       	brge	.+32     	; 0x9a4 <__floatsisf+0xaa>
     984:	08 2e       	mov	r0, r24
     986:	04 c0       	rjmp	.+8      	; 0x990 <__floatsisf+0x96>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__floatsisf+0x8e>
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 1a       	sub	r12, r24
     99e:	d9 0a       	sbc	r13, r25
     9a0:	dc 82       	std	Y+4, r13	; 0x04
     9a2:	cb 82       	std	Y+3, r12	; 0x03
     9a4:	ba 82       	std	Y+2, r11	; 0x02
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	e9 e0       	ldi	r30, 0x09	; 9
     9b2:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x12>

000009b6 <__fixsfsi>:
     9b6:	ac e0       	ldi	r26, 0x0C	; 12
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e1 ee       	ldi	r30, 0xE1	; 225
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__prologue_saves__+0x20>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	be 01       	movw	r22, r28
     9d0:	6b 5f       	subi	r22, 0xFB	; 251
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	61 f1       	breq	.+88     	; 0xa36 <__fixsfsi+0x80>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	50 f1       	brcs	.+84     	; 0xa36 <__fixsfsi+0x80>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	21 f4       	brne	.+8      	; 0x9ee <__fixsfsi+0x38>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	51 f1       	breq	.+84     	; 0xa40 <__fixsfsi+0x8a>
     9ec:	2e c0       	rjmp	.+92     	; 0xa4a <__fixsfsi+0x94>
     9ee:	2f 81       	ldd	r18, Y+7	; 0x07
     9f0:	38 85       	ldd	r19, Y+8	; 0x08
     9f2:	37 fd       	sbrc	r19, 7
     9f4:	20 c0       	rjmp	.+64     	; 0xa36 <__fixsfsi+0x80>
     9f6:	6e 81       	ldd	r22, Y+6	; 0x06
     9f8:	2f 31       	cpi	r18, 0x1F	; 31
     9fa:	31 05       	cpc	r19, r1
     9fc:	1c f0       	brlt	.+6      	; 0xa04 <__fixsfsi+0x4e>
     9fe:	66 23       	and	r22, r22
     a00:	f9 f0       	breq	.+62     	; 0xa40 <__fixsfsi+0x8a>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <__fixsfsi+0x94>
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	5c 85       	ldd	r21, Y+12	; 0x0c
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fixsfsi+0x68>
     a16:	56 95       	lsr	r21
     a18:	47 95       	ror	r20
     a1a:	37 95       	ror	r19
     a1c:	27 95       	ror	r18
     a1e:	8a 95       	dec	r24
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fixsfsi+0x60>
     a22:	66 23       	and	r22, r22
     a24:	b1 f0       	breq	.+44     	; 0xa52 <__fixsfsi+0x9c>
     a26:	50 95       	com	r21
     a28:	40 95       	com	r20
     a2a:	30 95       	com	r19
     a2c:	21 95       	neg	r18
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 4f       	sbci	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__fixsfsi+0x9c>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f e7       	ldi	r21, 0x7F	; 127
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fixsfsi+0x9c>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e8       	ldi	r21, 0x80	; 128
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	2c 96       	adiw	r28, 0x0c	; 12
     a58:	e2 e0       	ldi	r30, 0x02	; 2
     a5a:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__epilogue_restores__+0x20>

00000a5e <__clzsi2>:
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	7b 01       	movw	r14, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	e8 16       	cp	r14, r24
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	f8 06       	cpc	r15, r24
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 07       	cpc	r16, r24
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	18 07       	cpc	r17, r24
     a7a:	88 f4       	brcc	.+34     	; 0xa9e <__clzsi2+0x40>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	e8 16       	cp	r14, r24
     a80:	f1 04       	cpc	r15, r1
     a82:	01 05       	cpc	r16, r1
     a84:	11 05       	cpc	r17, r1
     a86:	31 f0       	breq	.+12     	; 0xa94 <__clzsi2+0x36>
     a88:	28 f0       	brcs	.+10     	; 0xa94 <__clzsi2+0x36>
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	17 c0       	rjmp	.+46     	; 0xac2 <__clzsi2+0x64>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__clzsi2+0x64>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	e8 16       	cp	r14, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	f8 06       	cpc	r15, r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 07       	cpc	r16, r24
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	18 07       	cpc	r17, r24
     aae:	28 f0       	brcs	.+10     	; 0xaba <__clzsi2+0x5c>
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x64>
     aba:	80 e1       	ldi	r24, 0x10	; 16
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	20 e2       	ldi	r18, 0x20	; 32
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	28 1b       	sub	r18, r24
     acc:	39 0b       	sbc	r19, r25
     ace:	4a 0b       	sbc	r20, r26
     ad0:	5b 0b       	sbc	r21, r27
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__clzsi2+0x7e>
     ad4:	16 95       	lsr	r17
     ad6:	07 95       	ror	r16
     ad8:	f7 94       	ror	r15
     ada:	e7 94       	ror	r14
     adc:	8a 95       	dec	r24
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__clzsi2+0x76>
     ae0:	f7 01       	movw	r30, r14
     ae2:	ed 53       	subi	r30, 0x3D	; 61
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	28 1b       	sub	r18, r24
     aea:	31 09       	sbc	r19, r1
     aec:	41 09       	sbc	r20, r1
     aee:	51 09       	sbc	r21, r1
     af0:	c9 01       	movw	r24, r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <__pack_f>:
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	fc 01       	movw	r30, r24
     b08:	e4 80       	ldd	r14, Z+4	; 0x04
     b0a:	f5 80       	ldd	r15, Z+5	; 0x05
     b0c:	06 81       	ldd	r16, Z+6	; 0x06
     b0e:	17 81       	ldd	r17, Z+7	; 0x07
     b10:	d1 80       	ldd	r13, Z+1	; 0x01
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	48 f4       	brcc	.+18     	; 0xb2a <__pack_f+0x2e>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	a0 e1       	ldi	r26, 0x10	; 16
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e8 2a       	or	r14, r24
     b22:	f9 2a       	or	r15, r25
     b24:	0a 2b       	or	r16, r26
     b26:	1b 2b       	or	r17, r27
     b28:	a5 c0       	rjmp	.+330    	; 0xc74 <__pack_f+0x178>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__pack_f+0x34>
     b2e:	9f c0       	rjmp	.+318    	; 0xc6e <__pack_f+0x172>
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	21 f4       	brne	.+8      	; 0xb3c <__pack_f+0x40>
     b34:	ee 24       	eor	r14, r14
     b36:	ff 24       	eor	r15, r15
     b38:	87 01       	movw	r16, r14
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__pack_f+0x4a>
     b3c:	e1 14       	cp	r14, r1
     b3e:	f1 04       	cpc	r15, r1
     b40:	01 05       	cpc	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	19 f4       	brne	.+6      	; 0xb4c <__pack_f+0x50>
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	96 c0       	rjmp	.+300    	; 0xc78 <__pack_f+0x17c>
     b4c:	62 81       	ldd	r22, Z+2	; 0x02
     b4e:	73 81       	ldd	r23, Z+3	; 0x03
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	62 38       	cpi	r22, 0x82	; 130
     b54:	79 07       	cpc	r23, r25
     b56:	0c f0       	brlt	.+2      	; 0xb5a <__pack_f+0x5e>
     b58:	5b c0       	rjmp	.+182    	; 0xc10 <__pack_f+0x114>
     b5a:	22 e8       	ldi	r18, 0x82	; 130
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	26 1b       	sub	r18, r22
     b60:	37 0b       	sbc	r19, r23
     b62:	2a 31       	cpi	r18, 0x1A	; 26
     b64:	31 05       	cpc	r19, r1
     b66:	2c f0       	brlt	.+10     	; 0xb72 <__pack_f+0x76>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	2a c0       	rjmp	.+84     	; 0xbc6 <__pack_f+0xca>
     b72:	b8 01       	movw	r22, r16
     b74:	a7 01       	movw	r20, r14
     b76:	02 2e       	mov	r0, r18
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x86>
     b7a:	76 95       	lsr	r23
     b7c:	67 95       	ror	r22
     b7e:	57 95       	ror	r21
     b80:	47 95       	ror	r20
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__pack_f+0x7e>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x9c>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	2a 95       	dec	r18
     b9a:	d2 f7       	brpl	.-12     	; 0xb90 <__pack_f+0x94>
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	8e 21       	and	r24, r14
     ba4:	9f 21       	and	r25, r15
     ba6:	a0 23       	and	r26, r16
     ba8:	b1 23       	and	r27, r17
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	21 f0       	breq	.+8      	; 0xbba <__pack_f+0xbe>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	9a 01       	movw	r18, r20
     bbc:	ab 01       	movw	r20, r22
     bbe:	28 2b       	or	r18, r24
     bc0:	39 2b       	or	r19, r25
     bc2:	4a 2b       	or	r20, r26
     bc4:	5b 2b       	or	r21, r27
     bc6:	da 01       	movw	r26, r20
     bc8:	c9 01       	movw	r24, r18
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0xee>
     bdc:	27 ff       	sbrs	r18, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <__pack_f+0xf6>
     be0:	20 5c       	subi	r18, 0xC0	; 192
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	4f 4f       	sbci	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0xf6>
     bea:	21 5c       	subi	r18, 0xC1	; 193
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	4f 4f       	sbci	r20, 0xFF	; 255
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	20 30       	cpi	r18, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	3a 07       	cpc	r19, r26
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	4a 07       	cpc	r20, r26
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	5a 07       	cpc	r21, r26
     c04:	10 f0       	brcs	.+4      	; 0xc0a <__pack_f+0x10e>
     c06:	e1 e0       	ldi	r30, 0x01	; 1
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	79 01       	movw	r14, r18
     c0c:	8a 01       	movw	r16, r20
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <__pack_f+0x162>
     c10:	60 38       	cpi	r22, 0x80	; 128
     c12:	71 05       	cpc	r23, r1
     c14:	64 f5       	brge	.+88     	; 0xc6e <__pack_f+0x172>
     c16:	fb 01       	movw	r30, r22
     c18:	e1 58       	subi	r30, 0x81	; 129
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	d8 01       	movw	r26, r16
     c1e:	c7 01       	movw	r24, r14
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	a0 70       	andi	r26, 0x00	; 0
     c26:	b0 70       	andi	r27, 0x00	; 0
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <__pack_f+0x144>
     c32:	e7 fe       	sbrs	r14, 7
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <__pack_f+0x154>
     c36:	80 e4       	ldi	r24, 0x40	; 64
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0x14c>
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 0e       	add	r14, r24
     c4a:	f9 1e       	adc	r15, r25
     c4c:	0a 1f       	adc	r16, r26
     c4e:	1b 1f       	adc	r17, r27
     c50:	17 ff       	sbrs	r17, 7
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x162>
     c54:	16 95       	lsr	r17
     c56:	07 95       	ror	r16
     c58:	f7 94       	ror	r15
     c5a:	e7 94       	ror	r14
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	16 95       	lsr	r17
     c62:	07 95       	ror	r16
     c64:	f7 94       	ror	r15
     c66:	e7 94       	ror	r14
     c68:	8a 95       	dec	r24
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <__pack_f+0x164>
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__pack_f+0x17c>
     c6e:	ee 24       	eor	r14, r14
     c70:	ff 24       	eor	r15, r15
     c72:	87 01       	movw	r16, r14
     c74:	ef ef       	ldi	r30, 0xFF	; 255
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	6e 2f       	mov	r22, r30
     c7a:	67 95       	ror	r22
     c7c:	66 27       	eor	r22, r22
     c7e:	67 95       	ror	r22
     c80:	90 2f       	mov	r25, r16
     c82:	9f 77       	andi	r25, 0x7F	; 127
     c84:	d7 94       	ror	r13
     c86:	dd 24       	eor	r13, r13
     c88:	d7 94       	ror	r13
     c8a:	8e 2f       	mov	r24, r30
     c8c:	86 95       	lsr	r24
     c8e:	49 2f       	mov	r20, r25
     c90:	46 2b       	or	r20, r22
     c92:	58 2f       	mov	r21, r24
     c94:	5d 29       	or	r21, r13
     c96:	b7 01       	movw	r22, r14
     c98:	ca 01       	movw	r24, r20
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	08 95       	ret

00000ca6 <__unpack_f>:
     ca6:	fc 01       	movw	r30, r24
     ca8:	db 01       	movw	r26, r22
     caa:	40 81       	ld	r20, Z
     cac:	51 81       	ldd	r21, Z+1	; 0x01
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	62 2f       	mov	r22, r18
     cb2:	6f 77       	andi	r22, 0x7F	; 127
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	22 1f       	adc	r18, r18
     cb8:	22 27       	eor	r18, r18
     cba:	22 1f       	adc	r18, r18
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	82 2b       	or	r24, r18
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	99 1f       	adc	r25, r25
     cca:	99 27       	eor	r25, r25
     ccc:	99 1f       	adc	r25, r25
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	9c 93       	st	X, r25
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	a9 f5       	brne	.+106    	; 0xd44 <__unpack_f+0x9e>
     cda:	41 15       	cp	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	71 05       	cpc	r23, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <__unpack_f+0x42>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	37 c0       	rjmp	.+110    	; 0xd56 <__unpack_f+0xb0>
     ce8:	82 e8       	ldi	r24, 0x82	; 130
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	12 97       	sbiw	r26, 0x02	; 2
     cf4:	9a 01       	movw	r18, r20
     cf6:	ab 01       	movw	r20, r22
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	44 1f       	adc	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	6a 95       	dec	r22
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__unpack_f+0x54>
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8c 93       	st	X, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <__unpack_f+0x80>
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	44 1f       	adc	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	8d 91       	ld	r24, X+
     d18:	9c 91       	ld	r25, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	20 30       	cpi	r18, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	38 07       	cpc	r19, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	48 07       	cpc	r20, r24
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	58 07       	cpc	r21, r24
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__unpack_f+0x66>
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	2d 93       	st	X+, r18
     d3a:	3d 93       	st	X+, r19
     d3c:	4d 93       	st	X+, r20
     d3e:	5c 93       	st	X, r21
     d40:	17 97       	sbiw	r26, 0x07	; 7
     d42:	08 95       	ret
     d44:	2f 3f       	cpi	r18, 0xFF	; 255
     d46:	31 05       	cpc	r19, r1
     d48:	79 f4       	brne	.+30     	; 0xd68 <__unpack_f+0xc2>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	19 f4       	brne	.+6      	; 0xd5a <__unpack_f+0xb4>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	8c 93       	st	X, r24
     d58:	08 95       	ret
     d5a:	64 ff       	sbrs	r22, 4
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <__unpack_f+0xbe>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8c 93       	st	X, r24
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <__unpack_f+0xe2>
     d64:	1c 92       	st	X, r1
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <__unpack_f+0xe2>
     d68:	2f 57       	subi	r18, 0x7F	; 127
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	3c 93       	st	X, r19
     d70:	2e 93       	st	-X, r18
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	8c 93       	st	X, r24
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	44 0f       	add	r20, r20
     d7c:	55 1f       	adc	r21, r21
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	d1 f7       	brne	.-12     	; 0xd7a <__unpack_f+0xd4>
     d86:	70 64       	ori	r23, 0x40	; 64
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	4d 93       	st	X+, r20
     d8c:	5d 93       	st	X+, r21
     d8e:	6d 93       	st	X+, r22
     d90:	7c 93       	st	X, r23
     d92:	17 97       	sbiw	r26, 0x07	; 7
     d94:	08 95       	ret

00000d96 <__fpcmp_parts_f>:
     d96:	1f 93       	push	r17
     d98:	dc 01       	movw	r26, r24
     d9a:	fb 01       	movw	r30, r22
     d9c:	9c 91       	ld	r25, X
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <__fpcmp_parts_f+0xe>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <__fpcmp_parts_f+0x9c>
     da4:	80 81       	ld	r24, Z
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f4       	brcc	.+2      	; 0xdac <__fpcmp_parts_f+0x16>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <__fpcmp_parts_f+0x9c>
     dac:	94 30       	cpi	r25, 0x04	; 4
     dae:	51 f4       	brne	.+20     	; 0xdc4 <__fpcmp_parts_f+0x2e>
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	1c 91       	ld	r17, X
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	99 f5       	brne	.+102    	; 0xe1e <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	68 2f       	mov	r22, r24
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	61 1b       	sub	r22, r17
     dc0:	71 09       	sbc	r23, r1
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <__fpcmp_parts_f+0xac>
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__fpcmp_parts_f+0x3a>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	31 f4       	brne	.+12     	; 0xdd8 <__fpcmp_parts_f+0x42>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	b9 f1       	breq	.+110    	; 0xe3e <__fpcmp_parts_f+0xa8>
     dd0:	81 81       	ldd	r24, Z+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	89 f1       	breq	.+98     	; 0xe38 <__fpcmp_parts_f+0xa2>
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <__fpcmp_parts_f+0x9c>
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	1c 91       	ld	r17, X
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	f1 f0       	breq	.+60     	; 0xe1e <__fpcmp_parts_f+0x88>
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	18 17       	cp	r17, r24
     de6:	d9 f4       	brne	.+54     	; 0xe1e <__fpcmp_parts_f+0x88>
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	2d 91       	ld	r18, X+
     dec:	3c 91       	ld	r19, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	94 f0       	brlt	.+36     	; 0xe1e <__fpcmp_parts_f+0x88>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	bc f0       	brlt	.+46     	; 0xe2e <__fpcmp_parts_f+0x98>
     e00:	14 96       	adiw	r26, 0x04	; 4
     e02:	8d 91       	ld	r24, X+
     e04:	9d 91       	ld	r25, X+
     e06:	0d 90       	ld	r0, X+
     e08:	bc 91       	ld	r27, X
     e0a:	a0 2d       	mov	r26, r0
     e0c:	24 81       	ldd	r18, Z+4	; 0x04
     e0e:	35 81       	ldd	r19, Z+5	; 0x05
     e10:	46 81       	ldd	r20, Z+6	; 0x06
     e12:	57 81       	ldd	r21, Z+7	; 0x07
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	4a 07       	cpc	r20, r26
     e1a:	5b 07       	cpc	r21, r27
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <__fpcmp_parts_f+0x8e>
     e1e:	11 23       	and	r17, r17
     e20:	41 f0       	breq	.+16     	; 0xe32 <__fpcmp_parts_f+0x9c>
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <__fpcmp_parts_f+0xa2>
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	a4 07       	cpc	r26, r20
     e2a:	b5 07       	cpc	r27, r21
     e2c:	40 f4       	brcc	.+16     	; 0xe3e <__fpcmp_parts_f+0xa8>
     e2e:	11 23       	and	r17, r17
     e30:	19 f0       	breq	.+6      	; 0xe38 <__fpcmp_parts_f+0xa2>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__fpcmp_parts_f+0xac>
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <__fpcmp_parts_f+0xac>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	cb 01       	movw	r24, r22
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <DIO_voidInit>:
#include   "DIO_INT.h"
#include   "DIO_CONFIG.h"
 
 
 void DIO_voidInit(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	 DDRA_REGISTER = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     e50:	ea e3       	ldi	r30, 0x3A	; 58
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	8f e0       	ldi	r24, 0x0F	; 15
     e56:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	 DDRB_REGISTER = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     e58:	e7 e3       	ldi	r30, 0x37	; 55
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	 DDRC_REGISTER = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     e5e:	e4 e3       	ldi	r30, 0x34	; 52
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	 DDRD_REGISTER = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     e66:	e1 e3       	ldi	r30, 0x31	; 49
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	87 e0       	ldi	r24, 0x07	; 7
     e6c:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

	 PORTA_REGISTER = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     e6e:	eb e3       	ldi	r30, 0x3B	; 59
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8f e0       	ldi	r24, 0x0F	; 15
     e74:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);

	 PORTB_REGISTER = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     e76:	e8 e3       	ldi	r30, 0x38	; 56
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	8f e3       	ldi	r24, 0x3F	; 63
     e7c:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);

	 PORTC_REGISTER = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     e7e:	e5 e3       	ldi	r30, 0x35	; 53
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

	 PORTD_REGISTER = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     e84:	e2 e3       	ldi	r30, 0x32	; 50
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <DIO_u8SetPinDirection>:
 
 u8  DIO_u8SetPinDirection(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Direction)
 {
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <DIO_u8SetPinDirection+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <DIO_u8SetPinDirection+0x8>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_u8SetPinDirection+0xa>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	8a 83       	std	Y+2, r24	; 0x02
     ea0:	6b 83       	std	Y+3, r22	; 0x03
     ea2:	4c 83       	std	Y+4, r20	; 0x04
	 u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	85 30       	cpi	r24, 0x05	; 5
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <DIO_u8SetPinDirection+0x20>
     eae:	ed c0       	rjmp	.+474    	; 0x108a <DIO_u8SetPinDirection+0x1fa>
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <DIO_u8SetPinDirection+0x28>
     eb6:	e9 c0       	rjmp	.+466    	; 0x108a <DIO_u8SetPinDirection+0x1fa>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	88 23       	and	r24, r24
     ebc:	21 f0       	breq	.+8      	; 0xec6 <DIO_u8SetPinDirection+0x36>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <DIO_u8SetPinDirection+0x36>
     ec4:	e2 c0       	rjmp	.+452    	; 0x108a <DIO_u8SetPinDirection+0x1fa>
	 switch(COPY_u8PortId ){
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3e 83       	std	Y+6, r19	; 0x06
     ece:	2d 83       	std	Y+5, r18	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <DIO_u8SetPinDirection+0x4c>
     eda:	48 c0       	rjmp	.+144    	; 0xf6c <DIO_u8SetPinDirection+0xdc>
     edc:	2d 81       	ldd	r18, Y+5	; 0x05
     ede:	3e 81       	ldd	r19, Y+6	; 0x06
     ee0:	23 30       	cpi	r18, 0x03	; 3
     ee2:	31 05       	cpc	r19, r1
     ee4:	34 f4       	brge	.+12     	; 0xef2 <DIO_u8SetPinDirection+0x62>
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	71 f0       	breq	.+28     	; 0xf0c <DIO_u8SetPinDirection+0x7c>
     ef0:	cd c0       	rjmp	.+410    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
     ef2:	2d 81       	ldd	r18, Y+5	; 0x05
     ef4:	3e 81       	ldd	r19, Y+6	; 0x06
     ef6:	23 30       	cpi	r18, 0x03	; 3
     ef8:	31 05       	cpc	r19, r1
     efa:	09 f4       	brne	.+2      	; 0xefe <DIO_u8SetPinDirection+0x6e>
     efc:	67 c0       	rjmp	.+206    	; 0xfcc <DIO_u8SetPinDirection+0x13c>
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <DIO_u8SetPinDirection+0x7a>
     f08:	91 c0       	rjmp	.+290    	; 0x102c <DIO_u8SetPinDirection+0x19c>
     f0a:	c0 c0       	rjmp	.+384    	; 0x108c <DIO_u8SetPinDirection+0x1fc>

	case PORTA :
		if(COPY_u8Direction == INPUT){
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	88 23       	and	r24, r24
     f10:	a9 f4       	brne	.+42     	; 0xf3c <DIO_u8SetPinDirection+0xac>
			CLR_BIT(DDRA_REGISTER ,COPY_u8PinId );
     f12:	aa e3       	ldi	r26, 0x3A	; 58
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e3       	ldi	r30, 0x3A	; 58
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_u8SetPinDirection+0xa0>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_u8SetPinDirection+0x9c>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	a8 c0       	rjmp	.+336    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
		}
		else if(COPY_u8Direction == OUTPUT){
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	09 f0       	breq	.+2      	; 0xf44 <DIO_u8SetPinDirection+0xb4>
     f42:	a4 c0       	rjmp	.+328    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
			SET_BIT(DDRA_REGISTER ,COPY_u8PinId );
     f44:	aa e3       	ldi	r26, 0x3A	; 58
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ea e3       	ldi	r30, 0x3A	; 58
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_u8SetPinDirection+0xd2>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_u8SetPinDirection+0xce>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	90 c0       	rjmp	.+288    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Direction == INPUT){
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	88 23       	and	r24, r24
     f70:	a9 f4       	brne	.+42     	; 0xf9c <DIO_u8SetPinDirection+0x10c>
				CLR_BIT(DDRB_REGISTER ,COPY_u8PinId);
     f72:	a7 e3       	ldi	r26, 0x37	; 55
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e7 e3       	ldi	r30, 0x37	; 55
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_u8SetPinDirection+0x100>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_u8SetPinDirection+0xfc>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	78 c0       	rjmp	.+240    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <DIO_u8SetPinDirection+0x114>
     fa2:	74 c0       	rjmp	.+232    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRB_REGISTER ,COPY_u8PinId );
     fa4:	a7 e3       	ldi	r26, 0x37	; 55
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e3       	ldi	r30, 0x37	; 55
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_u8SetPinDirection+0x132>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_u8SetPinDirection+0x12e>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	60 c0       	rjmp	.+192    	; 0x108c <DIO_u8SetPinDirection+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Direction == INPUT){
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	88 23       	and	r24, r24
     fd0:	a9 f4       	brne	.+42     	; 0xffc <DIO_u8SetPinDirection+0x16c>
				CLR_BIT(DDRC_REGISTER ,COPY_u8PinId);
     fd2:	a4 e3       	ldi	r26, 0x34	; 52
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e4 e3       	ldi	r30, 0x34	; 52
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_u8SetPinDirection+0x160>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_u8SetPinDirection+0x15c>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	48 c0       	rjmp	.+144    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	09 f0       	breq	.+2      	; 0x1004 <DIO_u8SetPinDirection+0x174>
    1002:	44 c0       	rjmp	.+136    	; 0x108c <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRC_REGISTER ,COPY_u8PinId );
    1004:	a4 e3       	ldi	r26, 0x34	; 52
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e4 e3       	ldi	r30, 0x34	; 52
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8SetPinDirection+0x192>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8SetPinDirection+0x18e>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	30 c0       	rjmp	.+96     	; 0x108c <DIO_u8SetPinDirection+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Direction == INPUT){
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	88 23       	and	r24, r24
    1030:	a9 f4       	brne	.+42     	; 0x105c <DIO_u8SetPinDirection+0x1cc>
				CLR_BIT(DDRD_REGISTER ,COPY_u8PinId );
    1032:	a1 e3       	ldi	r26, 0x31	; 49
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e1 e3       	ldi	r30, 0x31	; 49
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_u8SetPinDirection+0x1c0>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_u8SetPinDirection+0x1bc>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	18 c0       	rjmp	.+48     	; 0x108c <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a9 f4       	brne	.+42     	; 0x108c <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRD_REGISTER ,COPY_u8PinId );
    1062:	a1 e3       	ldi	r26, 0x31	; 49
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e1 e3       	ldi	r30, 0x31	; 49
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinDirection+0x1f0>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinDirection+0x1ec>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	01 c0       	rjmp	.+2      	; 0x108c <DIO_u8SetPinDirection+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
    108a:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
	 
 } 
    108e:	26 96       	adiw	r28, 0x06	; 6
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_u8SetPinValue>:
 u8  DIO_u8SetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Value){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_u8SetPinValue+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <DIO_u8SetPinValue+0x8>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_u8SetPinValue+0xa>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	6b 83       	std	Y+3, r22	; 0x03
    10b2:	4c 83       	std	Y+4, r20	; 0x04
	  u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Value == LOGIC_LOW) ||(COPY_u8Value == LOGIC_HIGH) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	85 30       	cpi	r24, 0x05	; 5
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <DIO_u8SetPinValue+0x20>
    10be:	ed c0       	rjmp	.+474    	; 0x129a <DIO_u8SetPinValue+0x1fa>
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	88 30       	cpi	r24, 0x08	; 8
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <DIO_u8SetPinValue+0x28>
    10c6:	e9 c0       	rjmp	.+466    	; 0x129a <DIO_u8SetPinValue+0x1fa>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	88 23       	and	r24, r24
    10cc:	21 f0       	breq	.+8      	; 0x10d6 <DIO_u8SetPinValue+0x36>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <DIO_u8SetPinValue+0x36>
    10d4:	e2 c0       	rjmp	.+452    	; 0x129a <DIO_u8SetPinValue+0x1fa>
	 switch(COPY_u8PortId ){
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3e 83       	std	Y+6, r19	; 0x06
    10de:	2d 83       	std	Y+5, r18	; 0x05
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <DIO_u8SetPinValue+0x4c>
    10ea:	48 c0       	rjmp	.+144    	; 0x117c <DIO_u8SetPinValue+0xdc>
    10ec:	2d 81       	ldd	r18, Y+5	; 0x05
    10ee:	3e 81       	ldd	r19, Y+6	; 0x06
    10f0:	23 30       	cpi	r18, 0x03	; 3
    10f2:	31 05       	cpc	r19, r1
    10f4:	34 f4       	brge	.+12     	; 0x1102 <DIO_u8SetPinValue+0x62>
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	71 f0       	breq	.+28     	; 0x111c <DIO_u8SetPinValue+0x7c>
    1100:	cd c0       	rjmp	.+410    	; 0x129c <DIO_u8SetPinValue+0x1fc>
    1102:	2d 81       	ldd	r18, Y+5	; 0x05
    1104:	3e 81       	ldd	r19, Y+6	; 0x06
    1106:	23 30       	cpi	r18, 0x03	; 3
    1108:	31 05       	cpc	r19, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <DIO_u8SetPinValue+0x6e>
    110c:	67 c0       	rjmp	.+206    	; 0x11dc <DIO_u8SetPinValue+0x13c>
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	91 05       	cpc	r25, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <DIO_u8SetPinValue+0x7a>
    1118:	91 c0       	rjmp	.+290    	; 0x123c <DIO_u8SetPinValue+0x19c>
    111a:	c0 c0       	rjmp	.+384    	; 0x129c <DIO_u8SetPinValue+0x1fc>

	case PORTA :
		if(COPY_u8Value == LOGIC_LOW){
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	88 23       	and	r24, r24
    1120:	a9 f4       	brne	.+42     	; 0x114c <DIO_u8SetPinValue+0xac>
			CLR_BIT(PORTA_REGISTER ,COPY_u8PinId );
    1122:	ab e3       	ldi	r26, 0x3B	; 59
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e3       	ldi	r30, 0x3B	; 59
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_u8SetPinValue+0xa0>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_u8SetPinValue+0x9c>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	a8 c0       	rjmp	.+336    	; 0x129c <DIO_u8SetPinValue+0x1fc>
		}
		else if(COPY_u8Value == LOGIC_HIGH){
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	09 f0       	breq	.+2      	; 0x1154 <DIO_u8SetPinValue+0xb4>
    1152:	a4 c0       	rjmp	.+328    	; 0x129c <DIO_u8SetPinValue+0x1fc>
			SET_BIT(PORTA_REGISTER ,COPY_u8PinId );
    1154:	ab e3       	ldi	r26, 0x3B	; 59
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	eb e3       	ldi	r30, 0x3B	; 59
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8SetPinValue+0xd2>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8SetPinValue+0xce>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	90 c0       	rjmp	.+288    	; 0x129c <DIO_u8SetPinValue+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Value == LOGIC_LOW){
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	88 23       	and	r24, r24
    1180:	a9 f4       	brne	.+42     	; 0x11ac <DIO_u8SetPinValue+0x10c>
				CLR_BIT(PORTB_REGISTER ,COPY_u8PinId);
    1182:	a8 e3       	ldi	r26, 0x38	; 56
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e8 e3       	ldi	r30, 0x38	; 56
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_u8SetPinValue+0x100>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_u8SetPinValue+0xfc>
    11a4:	80 95       	com	r24
    11a6:	84 23       	and	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	78 c0       	rjmp	.+240    	; 0x129c <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <DIO_u8SetPinValue+0x114>
    11b2:	74 c0       	rjmp	.+232    	; 0x129c <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTB_REGISTER  ,COPY_u8PinId );
    11b4:	a8 e3       	ldi	r26, 0x38	; 56
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e8 e3       	ldi	r30, 0x38	; 56
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_u8SetPinValue+0x132>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_u8SetPinValue+0x12e>
    11d6:	84 2b       	or	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	60 c0       	rjmp	.+192    	; 0x129c <DIO_u8SetPinValue+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Value == LOGIC_LOW){
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	88 23       	and	r24, r24
    11e0:	a9 f4       	brne	.+42     	; 0x120c <DIO_u8SetPinValue+0x16c>
				CLR_BIT(PORTC_REGISTER  ,COPY_u8PinId);
    11e2:	a5 e3       	ldi	r26, 0x35	; 53
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e3       	ldi	r30, 0x35	; 53
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_u8SetPinValue+0x160>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_u8SetPinValue+0x15c>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	48 c0       	rjmp	.+144    	; 0x129c <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	09 f0       	breq	.+2      	; 0x1214 <DIO_u8SetPinValue+0x174>
    1212:	44 c0       	rjmp	.+136    	; 0x129c <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTC_REGISTER  ,COPY_u8PinId );
    1214:	a5 e3       	ldi	r26, 0x35	; 53
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e3       	ldi	r30, 0x35	; 53
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_u8SetPinValue+0x192>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_u8SetPinValue+0x18e>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	30 c0       	rjmp	.+96     	; 0x129c <DIO_u8SetPinValue+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Value == LOGIC_LOW){
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	88 23       	and	r24, r24
    1240:	a9 f4       	brne	.+42     	; 0x126c <DIO_u8SetPinValue+0x1cc>
				CLR_BIT(PORTD_REGISTER  ,COPY_u8PinId );
    1242:	a2 e3       	ldi	r26, 0x32	; 50
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e2 e3       	ldi	r30, 0x32	; 50
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8SetPinValue+0x1c0>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8SetPinValue+0x1bc>
    1264:	80 95       	com	r24
    1266:	84 23       	and	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	18 c0       	rjmp	.+48     	; 0x129c <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	a9 f4       	brne	.+42     	; 0x129c <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTD_REGISTER  ,COPY_u8PinId );
    1272:	a2 e3       	ldi	r26, 0x32	; 50
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_u8SetPinValue+0x1f0>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_u8SetPinValue+0x1ec>
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	01 c0       	rjmp	.+2      	; 0x129c <DIO_u8SetPinValue+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
    129a:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
 }   
    129e:	26 96       	adiw	r28, 0x06	; 6
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <DIO_u8GetPinValue>:
 
 u8  DIO_u8GetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 *COPY_Pu8PinValue) {
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	28 97       	sbiw	r28, 0x08	; 8
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	6c 83       	std	Y+4, r22	; 0x04
    12c8:	5e 83       	std	Y+6, r21	; 0x06
    12ca:	4d 83       	std	Y+5, r20	; 0x05
 u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	8a 83       	std	Y+2, r24	; 0x02
 u8 Local_u8PinValue ;  // to ensure that the fuction get_BIT_value will return 0 or 1  if true we will store the value in pointer 
if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 )  && (COPY_Pu8PinValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	85 30       	cpi	r24, 0x05	; 5
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <DIO_u8GetPinValue+0x28>
    12d6:	ad c0       	rjmp	.+346    	; 0x1432 <DIO_u8GetPinValue+0x182>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	88 30       	cpi	r24, 0x08	; 8
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <DIO_u8GetPinValue+0x30>
    12de:	a9 c0       	rjmp	.+338    	; 0x1432 <DIO_u8GetPinValue+0x182>
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	09 f4       	brne	.+2      	; 0x12ea <DIO_u8GetPinValue+0x3a>
    12e8:	a4 c0       	rjmp	.+328    	; 0x1432 <DIO_u8GetPinValue+0x182>

	 switch(COPY_u8PortId ){
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	38 87       	std	Y+8, r19	; 0x08
    12f2:	2f 83       	std	Y+7, r18	; 0x07
    12f4:	4f 81       	ldd	r20, Y+7	; 0x07
    12f6:	58 85       	ldd	r21, Y+8	; 0x08
    12f8:	42 30       	cpi	r20, 0x02	; 2
    12fa:	51 05       	cpc	r21, r1
    12fc:	c9 f1       	breq	.+114    	; 0x1370 <DIO_u8GetPinValue+0xc0>
    12fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1300:	98 85       	ldd	r25, Y+8	; 0x08
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	34 f4       	brge	.+12     	; 0x1314 <DIO_u8GetPinValue+0x64>
    1308:	2f 81       	ldd	r18, Y+7	; 0x07
    130a:	38 85       	ldd	r19, Y+8	; 0x08
    130c:	21 30       	cpi	r18, 0x01	; 1
    130e:	31 05       	cpc	r19, r1
    1310:	71 f0       	breq	.+28     	; 0x132e <DIO_u8GetPinValue+0x7e>
    1312:	90 c0       	rjmp	.+288    	; 0x1434 <DIO_u8GetPinValue+0x184>
    1314:	4f 81       	ldd	r20, Y+7	; 0x07
    1316:	58 85       	ldd	r21, Y+8	; 0x08
    1318:	43 30       	cpi	r20, 0x03	; 3
    131a:	51 05       	cpc	r21, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <DIO_u8GetPinValue+0x70>
    131e:	49 c0       	rjmp	.+146    	; 0x13b2 <DIO_u8GetPinValue+0x102>
    1320:	8f 81       	ldd	r24, Y+7	; 0x07
    1322:	98 85       	ldd	r25, Y+8	; 0x08
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <DIO_u8GetPinValue+0x7c>
    132a:	63 c0       	rjmp	.+198    	; 0x13f2 <DIO_u8GetPinValue+0x142>
    132c:	83 c0       	rjmp	.+262    	; 0x1434 <DIO_u8GetPinValue+0x184>

	 	 	case PORTA :
	 	 		 Local_u8PinValue =  GET_BIT(PINA_REGISTER , COPY_u8PinId);
    132e:	e9 e3       	ldi	r30, 0x39	; 57
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8c 81       	ldd	r24, Y+4	; 0x04
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a9 01       	movw	r20, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_u8GetPinValue+0x96>
    1342:	55 95       	asr	r21
    1344:	47 95       	ror	r20
    1346:	8a 95       	dec	r24
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_u8GetPinValue+0x92>
    134a:	ca 01       	movw	r24, r20
    134c:	81 70       	andi	r24, 0x01	; 1
    134e:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	88 23       	and	r24, r24
    1354:	21 f4       	brne	.+8      	; 0x135e <DIO_u8GetPinValue+0xae>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    1356:	ed 81       	ldd	r30, Y+5	; 0x05
    1358:	fe 81       	ldd	r31, Y+6	; 0x06
    135a:	10 82       	st	Z, r1
    135c:	6b c0       	rjmp	.+214    	; 0x1434 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	09 f0       	breq	.+2      	; 0x1366 <DIO_u8GetPinValue+0xb6>
    1364:	67 c0       	rjmp	.+206    	; 0x1434 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    1366:	ed 81       	ldd	r30, Y+5	; 0x05
    1368:	fe 81       	ldd	r31, Y+6	; 0x06
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	80 83       	st	Z, r24
    136e:	62 c0       	rjmp	.+196    	; 0x1434 <DIO_u8GetPinValue+0x184>
				 }
	 	 	 break ;

	 	 	case PORTB :
	 	 		  Local_u8PinValue =  GET_BIT(PINB_REGISTER , COPY_u8PinId);
    1370:	e6 e3       	ldi	r30, 0x36	; 54
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8GetPinValue+0xd8>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8GetPinValue+0xd4>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	88 23       	and	r24, r24
    1396:	21 f4       	brne	.+8      	; 0x13a0 <DIO_u8GetPinValue+0xf0>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    1398:	ed 81       	ldd	r30, Y+5	; 0x05
    139a:	fe 81       	ldd	r31, Y+6	; 0x06
    139c:	10 82       	st	Z, r1
    139e:	4a c0       	rjmp	.+148    	; 0x1434 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <DIO_u8GetPinValue+0xf8>
    13a6:	46 c0       	rjmp	.+140    	; 0x1434 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    13a8:	ed 81       	ldd	r30, Y+5	; 0x05
    13aa:	fe 81       	ldd	r31, Y+6	; 0x06
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 83       	st	Z, r24
    13b0:	41 c0       	rjmp	.+130    	; 0x1434 <DIO_u8GetPinValue+0x184>
				 }
	 	 		 break ;

	 	 	case PORTC :
	 	 		  Local_u8PinValue =  GET_BIT(PINC_REGISTER , COPY_u8PinId);
    13b2:	e3 e3       	ldi	r30, 0x33	; 51
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_u8GetPinValue+0x11a>
    13c6:	55 95       	asr	r21
    13c8:	47 95       	ror	r20
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_u8GetPinValue+0x116>
    13ce:	ca 01       	movw	r24, r20
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	88 23       	and	r24, r24
    13d8:	21 f4       	brne	.+8      	; 0x13e2 <DIO_u8GetPinValue+0x132>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    13da:	ed 81       	ldd	r30, Y+5	; 0x05
    13dc:	fe 81       	ldd	r31, Y+6	; 0x06
    13de:	10 82       	st	Z, r1
    13e0:	29 c0       	rjmp	.+82     	; 0x1434 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	31 f5       	brne	.+76     	; 0x1434 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    13e8:	ed 81       	ldd	r30, Y+5	; 0x05
    13ea:	fe 81       	ldd	r31, Y+6	; 0x06
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 83       	st	Z, r24
    13f0:	21 c0       	rjmp	.+66     	; 0x1434 <DIO_u8GetPinValue+0x184>
				 }
	 	 			break ;

	 	 	case PORTD :
	 	 		 Local_u8PinValue =  GET_BIT(PIND_REGISTER , COPY_u8PinId);
    13f2:	e0 e3       	ldi	r30, 0x30	; 48
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a9 01       	movw	r20, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_u8GetPinValue+0x15a>
    1406:	55 95       	asr	r21
    1408:	47 95       	ror	r20
    140a:	8a 95       	dec	r24
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_u8GetPinValue+0x156>
    140e:	ca 01       	movw	r24, r20
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	88 23       	and	r24, r24
    1418:	21 f4       	brne	.+8      	; 0x1422 <DIO_u8GetPinValue+0x172>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    141a:	ed 81       	ldd	r30, Y+5	; 0x05
    141c:	fe 81       	ldd	r31, Y+6	; 0x06
    141e:	10 82       	st	Z, r1
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	31 f4       	brne	.+12     	; 0x1434 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    1428:	ed 81       	ldd	r30, Y+5	; 0x05
    142a:	fe 81       	ldd	r31, Y+6	; 0x06
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	80 83       	st	Z, r24
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <DIO_u8GetPinValue+0x184>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    1432:	1a 82       	std	Y+2, r1	; 0x02
}

	return   Local_u8ErrorState ; 
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
 } 
    1436:	28 96       	adiw	r28, 0x08	; 8
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <DIO_u8SetPortDirection>:
 
 
 u8  DIO_u8SetPortDirection(u8 COPY_u8PortId  ,u8 COPY_u8Direction) {
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_u8SetPortDirection+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <DIO_u8SetPortDirection+0x8>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;  
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
	 if( (COPY_u8PortId <= PORTD)   &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ){
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	85 30       	cpi	r24, 0x05	; 5
    1462:	d0 f5       	brcc	.+116    	; 0x14d8 <DIO_u8SetPortDirection+0x90>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 23       	and	r24, r24
    1468:	19 f0       	breq	.+6      	; 0x1470 <DIO_u8SetPortDirection+0x28>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	a1 f5       	brne	.+104    	; 0x14d8 <DIO_u8SetPortDirection+0x90>
	 
	  switch (COPY_u8PortId){
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3d 83       	std	Y+5, r19	; 0x05
    1478:	2c 83       	std	Y+4, r18	; 0x04
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	91 05       	cpc	r25, r1
    1482:	d9 f0       	breq	.+54     	; 0x14ba <DIO_u8SetPortDirection+0x72>
    1484:	2c 81       	ldd	r18, Y+4	; 0x04
    1486:	3d 81       	ldd	r19, Y+5	; 0x05
    1488:	23 30       	cpi	r18, 0x03	; 3
    148a:	31 05       	cpc	r19, r1
    148c:	34 f4       	brge	.+12     	; 0x149a <DIO_u8SetPortDirection+0x52>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	61 f0       	breq	.+24     	; 0x14b0 <DIO_u8SetPortDirection+0x68>
    1498:	20 c0       	rjmp	.+64     	; 0x14da <DIO_u8SetPortDirection+0x92>
    149a:	2c 81       	ldd	r18, Y+4	; 0x04
    149c:	3d 81       	ldd	r19, Y+5	; 0x05
    149e:	23 30       	cpi	r18, 0x03	; 3
    14a0:	31 05       	cpc	r19, r1
    14a2:	81 f0       	breq	.+32     	; 0x14c4 <DIO_u8SetPortDirection+0x7c>
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	9d 81       	ldd	r25, Y+5	; 0x05
    14a8:	84 30       	cpi	r24, 0x04	; 4
    14aa:	91 05       	cpc	r25, r1
    14ac:	81 f0       	breq	.+32     	; 0x14ce <DIO_u8SetPortDirection+0x86>
    14ae:	15 c0       	rjmp	.+42     	; 0x14da <DIO_u8SetPortDirection+0x92>
    case PORTA:
    	DDRA_REGISTER = COPY_u8Direction;
    14b0:	ea e3       	ldi	r30, 0x3A	; 58
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	80 83       	st	Z, r24
    14b8:	10 c0       	rjmp	.+32     	; 0x14da <DIO_u8SetPortDirection+0x92>
    	break ;
    case PORTB:
       	DDRB_REGISTER = COPY_u8Direction;
    14ba:	e7 e3       	ldi	r30, 0x37	; 55
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	80 83       	st	Z, r24
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <DIO_u8SetPortDirection+0x92>
       	break ;
    case PORTC:
        DDRC_REGISTER = COPY_u8Direction;
    14c4:	e4 e3       	ldi	r30, 0x34	; 52
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	80 83       	st	Z, r24
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <DIO_u8SetPortDirection+0x92>
        break ;
    case PORTD:
       DDRB_REGISTER = COPY_u8Direction;
    14ce:	e7 e3       	ldi	r30, 0x37	; 55
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	80 83       	st	Z, r24
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <DIO_u8SetPortDirection+0x92>
           	break ;

	 }}
	 
	 else{
	Local_u8ErrorState =STD_TYPES_NOK;
    14d8:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 
    14da:	89 81       	ldd	r24, Y+1	; 0x01
	 
 }
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <DIO_u8SetPortValue>:
 
 u8  DIO_u8SetPortValue(u8 COPY_u8PortId  ,u8 COPY_u8Value) {
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_u8SetPortValue+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_u8SetPortValue+0x8>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;   
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
     if( (COPY_u8PortId <= PORTD)){
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	85 30       	cpi	r24, 0x05	; 5
    1506:	98 f5       	brcc	.+102    	; 0x156e <DIO_u8SetPortValue+0x82>
	
	switch(COPY_u8PortId ){
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3d 83       	std	Y+5, r19	; 0x05
    1510:	2c 83       	std	Y+4, r18	; 0x04
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	d9 f0       	breq	.+54     	; 0x1552 <DIO_u8SetPortValue+0x66>
    151c:	2c 81       	ldd	r18, Y+4	; 0x04
    151e:	3d 81       	ldd	r19, Y+5	; 0x05
    1520:	23 30       	cpi	r18, 0x03	; 3
    1522:	31 05       	cpc	r19, r1
    1524:	34 f4       	brge	.+12     	; 0x1532 <DIO_u8SetPortValue+0x46>
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	61 f0       	breq	.+24     	; 0x1548 <DIO_u8SetPortValue+0x5c>
    1530:	1e c0       	rjmp	.+60     	; 0x156e <DIO_u8SetPortValue+0x82>
    1532:	2c 81       	ldd	r18, Y+4	; 0x04
    1534:	3d 81       	ldd	r19, Y+5	; 0x05
    1536:	23 30       	cpi	r18, 0x03	; 3
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <DIO_u8SetPortValue+0x70>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	84 30       	cpi	r24, 0x04	; 4
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <DIO_u8SetPortValue+0x7a>
    1546:	13 c0       	rjmp	.+38     	; 0x156e <DIO_u8SetPortValue+0x82>

			 	case PORTA :
			 		 PORTA_REGISTER = COPY_u8Value ;
    1548:	eb e3       	ldi	r30, 0x3B	; 59
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	80 83       	st	Z, r24
    1550:	0e c0       	rjmp	.+28     	; 0x156e <DIO_u8SetPortValue+0x82>
			 	 break ;

			 	case PORTB :
			 		 PORTB_REGISTER = COPY_u8Value ;
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	80 83       	st	Z, r24
    155a:	09 c0       	rjmp	.+18     	; 0x156e <DIO_u8SetPortValue+0x82>
			 		 break ;

			 	case PORTC :

			 		 PORTC_REGISTER = COPY_u8Value ;
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	80 83       	st	Z, r24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <DIO_u8SetPortValue+0x82>
			 			break ;

			 	case PORTD :
			 		 PORTD_REGISTER = COPY_u8Value ;
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	80 83       	st	Z, r24



			 	}
	 }
	 return   Local_u8ErrorState ; 
    156e:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <DIO_u8GetPortValue>:
  
 u8  DIO_u8GetPortValue (u8 COPY_u8PortId , u8 *COPY_Pu8PortValue){
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_u8GetPortValue+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <DIO_u8GetPortValue+0x8>
    1588:	00 d0       	rcall	.+0      	; 0x158a <DIO_u8GetPortValue+0xa>
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	7c 83       	std	Y+4, r23	; 0x04
    1592:	6b 83       	std	Y+3, r22	; 0x03
	 
u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	89 83       	std	Y+1, r24	; 0x01
  
 
if( (COPY_u8PortId <= PORTD)  && (COPY_Pu8PortValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	85 30       	cpi	r24, 0x05	; 5
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <DIO_u8GetPortValue+0x20>
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <DIO_u8GetPortValue+0xa0>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	e1 f1       	breq	.+120    	; 0x1620 <DIO_u8GetPortValue+0xa0>

	 switch(COPY_u8PortId ){
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	3e 83       	std	Y+6, r19	; 0x06
    15b0:	2d 83       	std	Y+5, r18	; 0x05
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	91 05       	cpc	r25, r1
    15ba:	e9 f0       	breq	.+58     	; 0x15f6 <DIO_u8GetPortValue+0x76>
    15bc:	2d 81       	ldd	r18, Y+5	; 0x05
    15be:	3e 81       	ldd	r19, Y+6	; 0x06
    15c0:	23 30       	cpi	r18, 0x03	; 3
    15c2:	31 05       	cpc	r19, r1
    15c4:	34 f4       	brge	.+12     	; 0x15d2 <DIO_u8GetPortValue+0x52>
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 05       	cpc	r25, r1
    15ce:	61 f0       	breq	.+24     	; 0x15e8 <DIO_u8GetPortValue+0x68>
    15d0:	28 c0       	rjmp	.+80     	; 0x1622 <DIO_u8GetPortValue+0xa2>
    15d2:	2d 81       	ldd	r18, Y+5	; 0x05
    15d4:	3e 81       	ldd	r19, Y+6	; 0x06
    15d6:	23 30       	cpi	r18, 0x03	; 3
    15d8:	31 05       	cpc	r19, r1
    15da:	a1 f0       	breq	.+40     	; 0x1604 <DIO_u8GetPortValue+0x84>
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	84 30       	cpi	r24, 0x04	; 4
    15e2:	91 05       	cpc	r25, r1
    15e4:	b1 f0       	breq	.+44     	; 0x1612 <DIO_u8GetPortValue+0x92>
    15e6:	1d c0       	rjmp	.+58     	; 0x1622 <DIO_u8GetPortValue+0xa2>

	 	 	case PORTA :
	 	 		*COPY_Pu8PortValue = PINA_REGISTER;
    15e8:	e9 e3       	ldi	r30, 0x39	; 57
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	80 83       	st	Z, r24
    15f4:	16 c0       	rjmp	.+44     	; 0x1622 <DIO_u8GetPortValue+0xa2>
				 
	 	 	 break ;

	 	 	case PORTB :
	 	 		 *COPY_Pu8PortValue = PINB_REGISTER;
    15f6:	e6 e3       	ldi	r30, 0x36	; 54
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	eb 81       	ldd	r30, Y+3	; 0x03
    15fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1600:	80 83       	st	Z, r24
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

	 	 	case PORTC :
	 	 		 *COPY_Pu8PortValue = PINC_REGISTER;
    1604:	e3 e3       	ldi	r30, 0x33	; 51
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	80 83       	st	Z, r24
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <DIO_u8GetPortValue+0xa2>
	 	 			break ;

	 	 	case PORTD :
	 	 		 *COPY_Pu8PortValue = PIND_REGISTER ;
    1612:	e0 e3       	ldi	r30, 0x30	; 48
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	80 83       	st	Z, r24
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    1620:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 	 
    1622:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
	 
 }
    1624:	26 96       	adiw	r28, 0x06	; 6
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <KPD_u8KpdGetKeyState>:
 

const u8 Kpd_rows [4] ={KPD_RL1_PIN,KPD_RL2_PIN,KPD_RL3_PIN,KPD_RL4_PIN} ;
const u8 Kpd_cols [6] ={KPD_CL1_PIN,KPD_CL2_PIN,KPD_CL3_PIN,KPD_CL4_PIN,KPD_CL5_PIN,KPD_CL6_PIN} ;

u8 KPD_u8KpdGetKeyState(u8 * Copy_pu8RteurnedKey){
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	65 97       	sbiw	r28, 0x15	; 21
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	9d 8b       	std	Y+21, r25	; 0x15
    164c:	8c 8b       	std	Y+20, r24	; 0x14
	*Copy_pu8RteurnedKey = Kpd_keynotpressed ;
    164e:	ec 89       	ldd	r30, Y+20	; 0x14
    1650:	fd 89       	ldd	r31, Y+21	; 0x15
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	80 83       	st	Z, r24

	 u8 LOCAL_ERROR_STATE = STD_TYPES_OK;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	8a 8b       	std	Y+18, r24	; 0x12
	 u8 local_u8Rowscounter ;
	 u8 local_u8CLScounter ;
	  u8 local_u8PinValue;
	  u8 local_flage =0 ;
    165a:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8RteurnedKey !=NULL){
    165c:	8c 89       	ldd	r24, Y+20	; 0x14
    165e:	9d 89       	ldd	r25, Y+21	; 0x15
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	09 f4       	brne	.+2      	; 0x1666 <KPD_u8KpdGetKeyState+0x30>
    1664:	ee c0       	rjmp	.+476    	; 0x1842 <KPD_u8KpdGetKeyState+0x20c>
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
    1666:	19 8a       	std	Y+17, r1	; 0x11
    1668:	e7 c0       	rjmp	.+462    	; 0x1838 <KPD_u8KpdGetKeyState+0x202>
		   DIO_u8SetPinValue(KPD_ROWS_PORT,  Kpd_rows[local_u8Rowscounter], LOGIC_LOW);
    166a:	89 89       	ldd	r24, Y+17	; 0x11
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	fc 01       	movw	r30, r24
    1672:	e5 52       	subi	r30, 0x25	; 37
    1674:	fe 4f       	sbci	r31, 0xFE	; 254
    1676:	90 81       	ld	r25, Z
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	69 2f       	mov	r22, r25
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
		   
		   for(local_u8CLScounter =0 ; local_u8CLScounter <= 5 ; local_u8CLScounter++){
    1682:	18 8a       	std	Y+16, r1	; 0x10
    1684:	c3 c0       	rjmp	.+390    	; 0x180c <KPD_u8KpdGetKeyState+0x1d6>
			  
			   DIO_u8GetPinValue(KPD_CLS_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    1686:	88 89       	ldd	r24, Y+16	; 0x10
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	fc 01       	movw	r30, r24
    168e:	e1 52       	subi	r30, 0x21	; 33
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	90 81       	ld	r25, Z
    1694:	9e 01       	movw	r18, r28
    1696:	2d 5e       	subi	r18, 0xED	; 237
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	69 2f       	mov	r22, r25
    169e:	a9 01       	movw	r20, r18
    16a0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_u8GetPinValue>
				  
			  if(local_u8PinValue == LOGIC_LOW){  /*Switch is presed */
    16a4:	8b 89       	ldd	r24, Y+19	; 0x13
    16a6:	88 23       	and	r24, r24
    16a8:	09 f0       	breq	.+2      	; 0x16ac <KPD_u8KpdGetKeyState+0x76>
    16aa:	ad c0       	rjmp	.+346    	; 0x1806 <KPD_u8KpdGetKeyState+0x1d0>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 ea       	ldi	r26, 0xA0	; 160
    16b2:	b1 e4       	ldi	r27, 0x41	; 65
    16b4:	8b 87       	std	Y+11, r24	; 0x0b
    16b6:	9c 87       	std	Y+12, r25	; 0x0c
    16b8:	ad 87       	std	Y+13, r26	; 0x0d
    16ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16be:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a ef       	ldi	r20, 0xFA	; 250
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8f 83       	std	Y+7, r24	; 0x07
    16d6:	98 87       	std	Y+8, r25	; 0x08
    16d8:	a9 87       	std	Y+9, r26	; 0x09
    16da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <KPD_u8KpdGetKeyState+0xc8>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <KPD_u8KpdGetKeyState+0x146>
	else if (__tmp > 65535)
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <KPD_u8KpdGetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	0f c0       	rjmp	.+30     	; 0x175e <KPD_u8KpdGetKeyState+0x128>
    1740:	88 ec       	ldi	r24, 0xC8	; 200
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <KPD_u8KpdGetKeyState+0x116>
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <KPD_u8KpdGetKeyState+0x10a>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <KPD_u8KpdGetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <KPD_u8KpdGetKeyState+0x152>
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
				   _delay_ms(20); // FOR BOUNCING 
				   /* check if the pin is still low */
				   DIO_u8GetPinValue(KPD_CLS_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    1790:	88 89       	ldd	r24, Y+16	; 0x10
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	fc 01       	movw	r30, r24
    1798:	e1 52       	subi	r30, 0x21	; 33
    179a:	fe 4f       	sbci	r31, 0xFE	; 254
    179c:	90 81       	ld	r25, Z
    179e:	9e 01       	movw	r18, r28
    17a0:	2d 5e       	subi	r18, 0xED	; 237
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	69 2f       	mov	r22, r25
    17a8:	a9 01       	movw	r20, r18
    17aa:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_u8GetPinValue>
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <KPD_u8KpdGetKeyState+0x198>
			     while(local_u8PinValue == LOGIC_LOW){  // TO TAKE READ OF PIN ONE TIME 
			    	 DIO_u8GetPinValue(KPD_CLS_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    17b0:	88 89       	ldd	r24, Y+16	; 0x10
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	fc 01       	movw	r30, r24
    17b8:	e1 52       	subi	r30, 0x21	; 33
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	90 81       	ld	r25, Z
    17be:	9e 01       	movw	r18, r28
    17c0:	2d 5e       	subi	r18, 0xED	; 237
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	69 2f       	mov	r22, r25
    17c8:	a9 01       	movw	r20, r18
    17ca:	0e 94 58 09 	call	0x12b0	; 0x12b0 <DIO_u8GetPinValue>
				  
			  if(local_u8PinValue == LOGIC_LOW){  /*Switch is presed */
				   _delay_ms(20); // FOR BOUNCING 
				   /* check if the pin is still low */
				   DIO_u8GetPinValue(KPD_CLS_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
			     while(local_u8PinValue == LOGIC_LOW){  // TO TAKE READ OF PIN ONE TIME 
    17ce:	8b 89       	ldd	r24, Y+19	; 0x13
    17d0:	88 23       	and	r24, r24
    17d2:	71 f3       	breq	.-36     	; 0x17b0 <KPD_u8KpdGetKeyState+0x17a>
			    	 DIO_u8GetPinValue(KPD_CLS_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
				 }
				 local_flage =1 ;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	8f 87       	std	Y+15, r24	; 0x0f
			  * Copy_pu8RteurnedKey = KPD_Au8Keys[local_u8Rowscounter][local_u8CLScounter];
    17d8:	89 89       	ldd	r24, Y+17	; 0x11
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	88 89       	ldd	r24, Y+16	; 0x10
    17e0:	48 2f       	mov	r20, r24
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	c9 01       	movw	r24, r18
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	82 0f       	add	r24, r18
    17ec:	93 1f       	adc	r25, r19
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	84 0f       	add	r24, r20
    17f4:	95 1f       	adc	r25, r21
    17f6:	fc 01       	movw	r30, r24
    17f8:	ed 53       	subi	r30, 0x3D	; 61
    17fa:	fe 4f       	sbci	r31, 0xFE	; 254
    17fc:	80 81       	ld	r24, Z
    17fe:	ec 89       	ldd	r30, Y+20	; 0x14
    1800:	fd 89       	ldd	r31, Y+21	; 0x15
    1802:	80 83       	st	Z, r24
    1804:	07 c0       	rjmp	.+14     	; 0x1814 <KPD_u8KpdGetKeyState+0x1de>
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
		   DIO_u8SetPinValue(KPD_ROWS_PORT,  Kpd_rows[local_u8Rowscounter], LOGIC_LOW);
		   
		   for(local_u8CLScounter =0 ; local_u8CLScounter <= 5 ; local_u8CLScounter++){
    1806:	88 89       	ldd	r24, Y+16	; 0x10
    1808:	8f 5f       	subi	r24, 0xFF	; 255
    180a:	88 8b       	std	Y+16, r24	; 0x10
    180c:	88 89       	ldd	r24, Y+16	; 0x10
    180e:	86 30       	cpi	r24, 0x06	; 6
    1810:	08 f4       	brcc	.+2      	; 0x1814 <KPD_u8KpdGetKeyState+0x1de>
    1812:	39 cf       	rjmp	.-398    	; 0x1686 <KPD_u8KpdGetKeyState+0x50>
			  * Copy_pu8RteurnedKey = KPD_Au8Keys[local_u8Rowscounter][local_u8CLScounter];
			  break ; 
		   }	  }
		   
		   /* diactivate Row */
          DIO_u8SetPinValue(KPD_ROWS_PORT,  Kpd_rows[local_u8Rowscounter], LOGIC_HIGH);
    1814:	89 89       	ldd	r24, Y+17	; 0x11
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	fc 01       	movw	r30, r24
    181c:	e5 52       	subi	r30, 0x25	; 37
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	90 81       	ld	r25, Z
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	69 2f       	mov	r22, r25
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
		   if(local_flage){
    182c:	8f 85       	ldd	r24, Y+15	; 0x0f
    182e:	88 23       	and	r24, r24
    1830:	49 f4       	brne	.+18     	; 0x1844 <KPD_u8KpdGetKeyState+0x20e>
	  u8 local_u8PinValue;
	  u8 local_flage =0 ;
	if(Copy_pu8RteurnedKey !=NULL){
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
    1832:	89 89       	ldd	r24, Y+17	; 0x11
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	89 8b       	std	Y+17, r24	; 0x11
    1838:	89 89       	ldd	r24, Y+17	; 0x11
    183a:	84 30       	cpi	r24, 0x04	; 4
    183c:	08 f4       	brcc	.+2      	; 0x1840 <KPD_u8KpdGetKeyState+0x20a>
    183e:	15 cf       	rjmp	.-470    	; 0x166a <KPD_u8KpdGetKeyState+0x34>
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <KPD_u8KpdGetKeyState+0x20e>
		   
	   }
	}
	else{
		
		LOCAL_ERROR_STATE = STD_TYPES_NOK;
    1842:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return LOCAL_ERROR_STATE ;
    1844:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1846:	65 96       	adiw	r28, 0x15	; 21
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <LCD_INIT>:
#include "LCD_PRV.h"


 
 
 void LCD_INIT(void){
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	e8 97       	sbiw	r28, 0x38	; 56
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE == LCD_u8_Mode_8_bit
 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	ac e0       	ldi	r26, 0x0C	; 12
    187c:	b2 e4       	ldi	r27, 0x42	; 66
    187e:	8d ab       	std	Y+53, r24	; 0x35
    1880:	9e ab       	std	Y+54, r25	; 0x36
    1882:	af ab       	std	Y+55, r26	; 0x37
    1884:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	6d a9       	ldd	r22, Y+53	; 0x35
    1888:	7e a9       	ldd	r23, Y+54	; 0x36
    188a:	8f a9       	ldd	r24, Y+55	; 0x37
    188c:	98 ad       	ldd	r25, Y+56	; 0x38
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	4a ef       	ldi	r20, 0xFA	; 250
    1894:	54 e4       	ldi	r21, 0x44	; 68
    1896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	89 ab       	std	Y+49, r24	; 0x31
    18a0:	9a ab       	std	Y+50, r25	; 0x32
    18a2:	ab ab       	std	Y+51, r26	; 0x33
    18a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18a6:	69 a9       	ldd	r22, Y+49	; 0x31
    18a8:	7a a9       	ldd	r23, Y+50	; 0x32
    18aa:	8b a9       	ldd	r24, Y+51	; 0x33
    18ac:	9c a9       	ldd	r25, Y+52	; 0x34
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e8       	ldi	r20, 0x80	; 128
    18b4:	5f e3       	ldi	r21, 0x3F	; 63
    18b6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <LCD_INIT+0x70>
		__ticks = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	98 ab       	std	Y+48, r25	; 0x30
    18c4:	8f a7       	std	Y+47, r24	; 0x2f
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <LCD_INIT+0xee>
	else if (__tmp > 65535)
    18c8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ca:	7a a9       	ldd	r23, Y+50	; 0x32
    18cc:	8b a9       	ldd	r24, Y+51	; 0x33
    18ce:	9c a9       	ldd	r25, Y+52	; 0x34
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	3f ef       	ldi	r19, 0xFF	; 255
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	57 e4       	ldi	r21, 0x47	; 71
    18d8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    18dc:	18 16       	cp	r1, r24
    18de:	4c f5       	brge	.+82     	; 0x1932 <LCD_INIT+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e0:	6d a9       	ldd	r22, Y+53	; 0x35
    18e2:	7e a9       	ldd	r23, Y+54	; 0x36
    18e4:	8f a9       	ldd	r24, Y+55	; 0x37
    18e6:	98 ad       	ldd	r25, Y+56	; 0x38
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	98 ab       	std	Y+48, r25	; 0x30
    1906:	8f a7       	std	Y+47, r24	; 0x2f
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <LCD_INIT+0xd0>
    190a:	88 ec       	ldi	r24, 0xC8	; 200
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9e a7       	std	Y+46, r25	; 0x2e
    1910:	8d a7       	std	Y+45, r24	; 0x2d
    1912:	8d a5       	ldd	r24, Y+45	; 0x2d
    1914:	9e a5       	ldd	r25, Y+46	; 0x2e
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_INIT+0xbe>
    191a:	9e a7       	std	Y+46, r25	; 0x2e
    191c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1920:	98 a9       	ldd	r25, Y+48	; 0x30
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	98 ab       	std	Y+48, r25	; 0x30
    1926:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	8f a5       	ldd	r24, Y+47	; 0x2f
    192a:	98 a9       	ldd	r25, Y+48	; 0x30
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	69 f7       	brne	.-38     	; 0x190a <LCD_INIT+0xb2>
    1930:	14 c0       	rjmp	.+40     	; 0x195a <LCD_INIT+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	69 a9       	ldd	r22, Y+49	; 0x31
    1934:	7a a9       	ldd	r23, Y+50	; 0x32
    1936:	8b a9       	ldd	r24, Y+51	; 0x33
    1938:	9c a9       	ldd	r25, Y+52	; 0x34
    193a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	98 ab       	std	Y+48, r25	; 0x30
    1944:	8f a7       	std	Y+47, r24	; 0x2f
    1946:	8f a5       	ldd	r24, Y+47	; 0x2f
    1948:	98 a9       	ldd	r25, Y+48	; 0x30
    194a:	9c a7       	std	Y+44, r25	; 0x2c
    194c:	8b a7       	std	Y+43, r24	; 0x2b
    194e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1950:	9c a5       	ldd	r25, Y+44	; 0x2c
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <LCD_INIT+0xfa>
    1956:	9c a7       	std	Y+44, r25	; 0x2c
    1958:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms(35);
	 LCD_WRITE_COMMAND(lcd_FunctionSet8bit);
    195a:	88 e3       	ldi	r24, 0x38	; 56
    195c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a0 ea       	ldi	r26, 0xA0	; 160
    1966:	b0 e4       	ldi	r27, 0x40	; 64
    1968:	8f a3       	std	Y+39, r24	; 0x27
    196a:	98 a7       	std	Y+40, r25	; 0x28
    196c:	a9 a7       	std	Y+41, r26	; 0x29
    196e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1970:	6f a1       	ldd	r22, Y+39	; 0x27
    1972:	78 a5       	ldd	r23, Y+40	; 0x28
    1974:	89 a5       	ldd	r24, Y+41	; 0x29
    1976:	9a a5       	ldd	r25, Y+42	; 0x2a
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4a ef       	ldi	r20, 0xFA	; 250
    197e:	54 e4       	ldi	r21, 0x44	; 68
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8b a3       	std	Y+35, r24	; 0x23
    198a:	9c a3       	std	Y+36, r25	; 0x24
    198c:	ad a3       	std	Y+37, r26	; 0x25
    198e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1990:	6b a1       	ldd	r22, Y+35	; 0x23
    1992:	7c a1       	ldd	r23, Y+36	; 0x24
    1994:	8d a1       	ldd	r24, Y+37	; 0x25
    1996:	9e a1       	ldd	r25, Y+38	; 0x26
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e8       	ldi	r20, 0x80	; 128
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    19a4:	88 23       	and	r24, r24
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <LCD_INIT+0x15a>
		__ticks = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9a a3       	std	Y+34, r25	; 0x22
    19ae:	89 a3       	std	Y+33, r24	; 0x21
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <LCD_INIT+0x1d8>
	else if (__tmp > 65535)
    19b2:	6b a1       	ldd	r22, Y+35	; 0x23
    19b4:	7c a1       	ldd	r23, Y+36	; 0x24
    19b6:	8d a1       	ldd	r24, Y+37	; 0x25
    19b8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	4c f5       	brge	.+82     	; 0x1a1c <LCD_INIT+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ca:	6f a1       	ldd	r22, Y+39	; 0x27
    19cc:	78 a5       	ldd	r23, Y+40	; 0x28
    19ce:	89 a5       	ldd	r24, Y+41	; 0x29
    19d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9a a3       	std	Y+34, r25	; 0x22
    19f0:	89 a3       	std	Y+33, r24	; 0x21
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <LCD_INIT+0x1ba>
    19f4:	88 ec       	ldi	r24, 0xC8	; 200
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	98 a3       	std	Y+32, r25	; 0x20
    19fa:	8f 8f       	std	Y+31, r24	; 0x1f
    19fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_INIT+0x1a8>
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a08:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	9a a3       	std	Y+34, r25	; 0x22
    1a10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a12:	89 a1       	ldd	r24, Y+33	; 0x21
    1a14:	9a a1       	ldd	r25, Y+34	; 0x22
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	69 f7       	brne	.-38     	; 0x19f4 <LCD_INIT+0x19c>
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <LCD_INIT+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a20:	8d a1       	ldd	r24, Y+37	; 0x25
    1a22:	9e a1       	ldd	r25, Y+38	; 0x26
    1a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9a a3       	std	Y+34, r25	; 0x22
    1a2e:	89 a3       	std	Y+33, r24	; 0x21
    1a30:	89 a1       	ldd	r24, Y+33	; 0x21
    1a32:	9a a1       	ldd	r25, Y+34	; 0x22
    1a34:	9e 8f       	std	Y+30, r25	; 0x1e
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
    1a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_INIT+0x1e4>
    1a40:	9e 8f       	std	Y+30, r25	; 0x1e
    1a42:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_DisplayOn );
    1a44:	8c e0       	ldi	r24, 0x0C	; 12
    1a46:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1a50:	b0 e4       	ldi	r27, 0x40	; 64
    1a52:	89 8f       	std	Y+25, r24	; 0x19
    1a54:	9a 8f       	std	Y+26, r25	; 0x1a
    1a56:	ab 8f       	std	Y+27, r26	; 0x1b
    1a58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a ef       	ldi	r20, 0xFA	; 250
    1a68:	54 e4       	ldi	r21, 0x44	; 68
    1a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	8d 8b       	std	Y+21, r24	; 0x15
    1a74:	9e 8b       	std	Y+22, r25	; 0x16
    1a76:	af 8b       	std	Y+23, r26	; 0x17
    1a78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a80:	98 8d       	ldd	r25, Y+24	; 0x18
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e8       	ldi	r20, 0x80	; 128
    1a88:	5f e3       	ldi	r21, 0x3F	; 63
    1a8a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1a8e:	88 23       	and	r24, r24
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <LCD_INIT+0x244>
		__ticks = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9c 8b       	std	Y+20, r25	; 0x14
    1a98:	8b 8b       	std	Y+19, r24	; 0x13
    1a9a:	3f c0       	rjmp	.+126    	; 0x1b1a <LCD_INIT+0x2c2>
	else if (__tmp > 65535)
    1a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	3f ef       	ldi	r19, 0xFF	; 255
    1aa8:	4f e7       	ldi	r20, 0x7F	; 127
    1aaa:	57 e4       	ldi	r21, 0x47	; 71
    1aac:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1ab0:	18 16       	cp	r1, r24
    1ab2:	4c f5       	brge	.+82     	; 0x1b06 <LCD_INIT+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	51 e4       	ldi	r21, 0x41	; 65
    1ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9c 8b       	std	Y+20, r25	; 0x14
    1ada:	8b 8b       	std	Y+19, r24	; 0x13
    1adc:	0f c0       	rjmp	.+30     	; 0x1afc <LCD_INIT+0x2a4>
    1ade:	88 ec       	ldi	r24, 0xC8	; 200
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9a 8b       	std	Y+18, r25	; 0x12
    1ae4:	89 8b       	std	Y+17, r24	; 0x11
    1ae6:	89 89       	ldd	r24, Y+17	; 0x11
    1ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_INIT+0x292>
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af2:	8b 89       	ldd	r24, Y+19	; 0x13
    1af4:	9c 89       	ldd	r25, Y+20	; 0x14
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	9c 8b       	std	Y+20, r25	; 0x14
    1afa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afc:	8b 89       	ldd	r24, Y+19	; 0x13
    1afe:	9c 89       	ldd	r25, Y+20	; 0x14
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	69 f7       	brne	.-38     	; 0x1ade <LCD_INIT+0x286>
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <LCD_INIT+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b06:	6d 89       	ldd	r22, Y+21	; 0x15
    1b08:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9c 8b       	std	Y+20, r25	; 0x14
    1b18:	8b 8b       	std	Y+19, r24	; 0x13
    1b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1e:	98 8b       	std	Y+16, r25	; 0x10
    1b20:	8f 87       	std	Y+15, r24	; 0x0f
    1b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b24:	98 89       	ldd	r25, Y+16	; 0x10
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_INIT+0x2ce>
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_Clear );
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 ea       	ldi	r26, 0xA0	; 160
    1b3a:	b0 e4       	ldi	r27, 0x40	; 64
    1b3c:	8b 87       	std	Y+11, r24	; 0x0b
    1b3e:	9c 87       	std	Y+12, r25	; 0x0c
    1b40:	ad 87       	std	Y+13, r26	; 0x0d
    1b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a ef       	ldi	r20, 0xFA	; 250
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8f 83       	std	Y+7, r24	; 0x07
    1b5e:	98 87       	std	Y+8, r25	; 0x08
    1b60:	a9 87       	std	Y+9, r26	; 0x09
    1b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b64:	6f 81       	ldd	r22, Y+7	; 0x07
    1b66:	78 85       	ldd	r23, Y+8	; 0x08
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e8       	ldi	r20, 0x80	; 128
    1b72:	5f e3       	ldi	r21, 0x3F	; 63
    1b74:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <LCD_INIT+0x32e>
		__ticks = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	3f c0       	rjmp	.+126    	; 0x1c04 <LCD_INIT+0x3ac>
	else if (__tmp > 65535)
    1b86:	6f 81       	ldd	r22, Y+7	; 0x07
    1b88:	78 85       	ldd	r23, Y+8	; 0x08
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	4f e7       	ldi	r20, 0x7F	; 127
    1b94:	57 e4       	ldi	r21, 0x47	; 71
    1b96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	4c f5       	brge	.+82     	; 0x1bf0 <LCD_INIT+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e2       	ldi	r20, 0x20	; 32
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	0f c0       	rjmp	.+30     	; 0x1be6 <LCD_INIT+0x38e>
    1bc8:	88 ec       	ldi	r24, 0xC8	; 200
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_INIT+0x37c>
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	69 f7       	brne	.-38     	; 0x1bc8 <LCD_INIT+0x370>
    1bee:	14 c0       	rjmp	.+40     	; 0x1c18 <LCD_INIT+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_INIT+0x3b8>
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_EntryMode );
    1c18:	86 e0       	ldi	r24, 0x06	; 6
    1c1a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
//	 	 _delay_ms(5);
//	 	 LCD_WRITE_COMMAND(lcd_EntryMode );

	 
#endif
 }
    1c1e:	e8 96       	adiw	r28, 0x38	; 56
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <LCD_WRITE_COMMAND>:
 void LCD_WRITE_COMMAND(u8 Copy_u8command){
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	2f 97       	sbiw	r28, 0x0f	; 15
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	8f 87       	std	Y+15, r24	; 0x0f
	
#if LCD_MODE == LCD_u8_Mode_8_bit
	/* step1 : RS =0  */  // PIN0 PORTA   SET THIS VALUES IN CONFIGRATION FILE 
	
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,  RS_PIN , LOGIC_LOW);
    1c46:	84 e0       	ldi	r24, 0x04	; 4
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
	 
	 /* Step2 : RW =0 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,RW_PIN  , LOGIC_LOW);  // PIN1 PORTA   SET THIS VALUES IN CONFIGRATION FILE
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
	
     DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);   // TO ENSURE THAT ENABLE PIN IS 0 BEFORE WE SEND DATA TO LCD 
    1c5a:	84 e0       	ldi	r24, 0x04	; 4
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
	
	 /* Write Command */
	 
	 DIO_u8SetPortValue(LCD_DATA_PORT , Copy_u8command) ; // SET PORT NUMBER IN CONFIGURATION FILE 
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c68:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_u8SetPortValue>
	 
	 /*  E=1 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_HIGH);
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	62 e0       	ldi	r22, 0x02	; 2
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	8b 87       	std	Y+11, r24	; 0x0b
    1c80:	9c 87       	std	Y+12, r25	; 0x0c
    1c82:	ad 87       	std	Y+13, r26	; 0x0d
    1c84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a ef       	ldi	r20, 0xFA	; 250
    1c94:	54 e4       	ldi	r21, 0x44	; 68
    1c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8f 83       	std	Y+7, r24	; 0x07
    1ca0:	98 87       	std	Y+8, r25	; 0x08
    1ca2:	a9 87       	std	Y+9, r26	; 0x09
    1ca4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <LCD_WRITE_COMMAND+0x98>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <LCD_WRITE_COMMAND+0x116>
	else if (__tmp > 65535)
    1cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cca:	78 85       	ldd	r23, Y+8	; 0x08
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <LCD_WRITE_COMMAND+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <LCD_WRITE_COMMAND+0xf8>
    1d0a:	88 ec       	ldi	r24, 0xC8	; 200
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	8b 83       	std	Y+3, r24	; 0x03
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_WRITE_COMMAND+0xe6>
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <LCD_WRITE_COMMAND+0xda>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <LCD_WRITE_COMMAND+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_WRITE_COMMAND+0x122>
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(1);
	 
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1d5a:	84 e0       	ldi	r24, 0x04	; 4
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
//	 /*  E=0 */
//
//	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);

	 #endif 
 }
    1d64:	2f 96       	adiw	r28, 0x0f	; 15
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <LCD_WRITE_Char>:
 
 
 void LCD_WRITE_Char(u8 Copy_u8char){
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	2f 97       	sbiw	r28, 0x0f	; 15
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == LCD_u8_Mode_8_bit
	/* step1 : RS =1  */  // PIN0 PORTA   SET THIS VALUES IN CONFIGRATION FILE 
	
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,  RS_PIN , LOGIC_HIGH);
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
	 
	 /* Step2 : RW =0 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,RW_PIN  , LOGIC_LOW);  // PIN1 PORTA   SET THIS VALUES IN CONFIGRATION FILE
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
	
     DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);   // TO ENSURE THAT ENABLE PIN IS 0 BEFORE WE SEND DATA TO LCD 
    1da0:	84 e0       	ldi	r24, 0x04	; 4
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
	
	 /* Write Command */
	 
	 DIO_u8SetPortValue(LCD_DATA_PORT , Copy_u8char) ; // SET PORT NUMBER IN CONFIGURATION FILE
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dae:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_u8SetPortValue>
	 
	 /*  E=1 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_HIGH);
    1db2:	84 e0       	ldi	r24, 0x04	; 4
    1db4:	62 e0       	ldi	r22, 0x02	; 2
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e8       	ldi	r26, 0x80	; 128
    1dc2:	bf e3       	ldi	r27, 0x3F	; 63
    1dc4:	8b 87       	std	Y+11, r24	; 0x0b
    1dc6:	9c 87       	std	Y+12, r25	; 0x0c
    1dc8:	ad 87       	std	Y+13, r26	; 0x0d
    1dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a ef       	ldi	r20, 0xFA	; 250
    1dda:	54 e4       	ldi	r21, 0x44	; 68
    1ddc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8f 83       	std	Y+7, r24	; 0x07
    1de6:	98 87       	std	Y+8, r25	; 0x08
    1de8:	a9 87       	std	Y+9, r26	; 0x09
    1dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_WRITE_Char+0x98>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <LCD_WRITE_Char+0x116>
	else if (__tmp > 65535)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <LCD_WRITE_Char+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <LCD_WRITE_Char+0xf8>
    1e50:	88 ec       	ldi	r24, 0xC8	; 200
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_WRITE_Char+0xe6>
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <LCD_WRITE_Char+0xda>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <LCD_WRITE_Char+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_WRITE_Char+0x122>
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(1);
	 
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	62 e0       	ldi	r22, 0x02	; 2
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8SetPinValue>
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);

	 #endif 
 }
    1eaa:	2f 96       	adiw	r28, 0x0f	; 15
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <LCD_WRITE_STRING>:
 
 void LCD_WRITE_STRING(u8 *copy_string ){
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <LCD_WRITE_STRING+0x6>
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <LCD_WRITE_STRING+0x8>
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
	u16 i =0 ;
    1ecc:	1a 82       	std	Y+2, r1	; 0x02
    1ece:	19 82       	std	Y+1, r1	; 0x01
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <LCD_WRITE_STRING+0x34>
	while(copy_string[i] !='\0'){
		LCD_WRITE_Char(copy_string[i]);
    1ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	f9 01       	movw	r30, r18
    1edc:	e8 0f       	add	r30, r24
    1ede:	f9 1f       	adc	r31, r25
    1ee0:	80 81       	ld	r24, Z
    1ee2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
		i++ ;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
	 #endif 
 }
 
 void LCD_WRITE_STRING(u8 *copy_string ){
	u16 i =0 ;
	while(copy_string[i] !='\0'){
    1ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	f9 01       	movw	r30, r18
    1efa:	e8 0f       	add	r30, r24
    1efc:	f9 1f       	adc	r31, r25
    1efe:	80 81       	ld	r24, Z
    1f00:	88 23       	and	r24, r24
    1f02:	39 f7       	brne	.-50     	; 0x1ed2 <LCD_WRITE_STRING+0x16>
		LCD_WRITE_Char(copy_string[i]);
		i++ ;

	}

 }
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <Lcd_voidDisplayNumber>:


 void Lcd_voidDisplayNumber(s32 Copy_s32Number){
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	6b 97       	sbiw	r28, 0x1b	; 27
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	68 8f       	std	Y+24, r22	; 0x18
    1f28:	79 8f       	std	Y+25, r23	; 0x19
    1f2a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f2c:	9b 8f       	std	Y+27, r25	; 0x1b
	 u8 arr[20];
	 u8  i =0 ;
    1f2e:	1b 82       	std	Y+3, r1	; 0x03
	 u8  j  ;
	 if( Copy_s32Number < 0 ){
    1f30:	88 8d       	ldd	r24, Y+24	; 0x18
    1f32:	99 8d       	ldd	r25, Y+25	; 0x19
    1f34:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f36:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f38:	bb 23       	and	r27, r27
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <Lcd_voidDisplayNumber+0x2c>
    1f3c:	43 c0       	rjmp	.+134    	; 0x1fc4 <Lcd_voidDisplayNumber+0xb2>
		 LCD_WRITE_Char('-');
    1f3e:	8d e2       	ldi	r24, 0x2D	; 45
    1f40:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
	 		Copy_s32Number *= -1 ;
    1f44:	88 8d       	ldd	r24, Y+24	; 0x18
    1f46:	99 8d       	ldd	r25, Y+25	; 0x19
    1f48:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f4a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f4c:	b0 95       	com	r27
    1f4e:	a0 95       	com	r26
    1f50:	90 95       	com	r25
    1f52:	81 95       	neg	r24
    1f54:	9f 4f       	sbci	r25, 0xFF	; 255
    1f56:	af 4f       	sbci	r26, 0xFF	; 255
    1f58:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5a:	88 8f       	std	Y+24, r24	; 0x18
    1f5c:	99 8f       	std	Y+25, r25	; 0x19
    1f5e:	aa 8f       	std	Y+26, r26	; 0x1a
    1f60:	bb 8f       	std	Y+27, r27	; 0x1b
    1f62:	30 c0       	rjmp	.+96     	; 0x1fc4 <Lcd_voidDisplayNumber+0xb2>
	 	}

	 while(Copy_s32Number !=0 ){
		u8 units = Copy_s32Number%10 ;
    1f64:	88 8d       	ldd	r24, Y+24	; 0x18
    1f66:	99 8d       	ldd	r25, Y+25	; 0x19
    1f68:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f6a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f6c:	2a e0       	ldi	r18, 0x0A	; 10
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 3a 18 	call	0x3074	; 0x3074 <__divmodsi4>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	89 83       	std	Y+1, r24	; 0x01
		arr[i]= ('0'+units);
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	40 5d       	subi	r20, 0xD0	; 208
    1f8e:	ce 01       	movw	r24, r28
    1f90:	04 96       	adiw	r24, 0x04	; 4
    1f92:	fc 01       	movw	r30, r24
    1f94:	e2 0f       	add	r30, r18
    1f96:	f3 1f       	adc	r31, r19
    1f98:	40 83       	st	Z, r20
		Copy_s32Number /= 10 ;
    1f9a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f9c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f9e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fa0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fa2:	2a e0       	ldi	r18, 0x0A	; 10
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 3a 18 	call	0x3074	; 0x3074 <__divmodsi4>
    1fb2:	da 01       	movw	r26, r20
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	88 8f       	std	Y+24, r24	; 0x18
    1fb8:	99 8f       	std	Y+25, r25	; 0x19
    1fba:	aa 8f       	std	Y+26, r26	; 0x1a
    1fbc:	bb 8f       	std	Y+27, r27	; 0x1b
		 i++ ;
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	8f 5f       	subi	r24, 0xFF	; 255
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
	 if( Copy_s32Number < 0 ){
		 LCD_WRITE_Char('-');
	 		Copy_s32Number *= -1 ;
	 	}

	 while(Copy_s32Number !=0 ){
    1fc4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fc6:	99 8d       	ldd	r25, Y+25	; 0x19
    1fc8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fca:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	a1 05       	cpc	r26, r1
    1fd0:	b1 05       	cpc	r27, r1
    1fd2:	41 f6       	brne	.-112    	; 0x1f64 <Lcd_voidDisplayNumber+0x52>
		arr[i]= ('0'+units);
		Copy_s32Number /= 10 ;
		 i++ ;
	 }

	 for ( j =i-1 ; arr[j] != '\0' ; --j) {
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	81 50       	subi	r24, 0x01	; 1
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
    1fda:	0e c0       	rjmp	.+28     	; 0x1ff8 <Lcd_voidDisplayNumber+0xe6>
		LCD_WRITE_Char(arr[j]);
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	04 96       	adiw	r24, 0x04	; 4
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e2 0f       	add	r30, r18
    1fea:	f3 1f       	adc	r31, r19
    1fec:	80 81       	ld	r24, Z
    1fee:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
		arr[i]= ('0'+units);
		Copy_s32Number /= 10 ;
		 i++ ;
	 }

	 for ( j =i-1 ; arr[j] != '\0' ; --j) {
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	81 50       	subi	r24, 0x01	; 1
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	ce 01       	movw	r24, r28
    2000:	04 96       	adiw	r24, 0x04	; 4
    2002:	fc 01       	movw	r30, r24
    2004:	e2 0f       	add	r30, r18
    2006:	f3 1f       	adc	r31, r19
    2008:	80 81       	ld	r24, Z
    200a:	88 23       	and	r24, r24
    200c:	39 f7       	brne	.-50     	; 0x1fdc <Lcd_voidDisplayNumber+0xca>
		LCD_WRITE_Char(arr[j]);
	}

 }
    200e:	6b 96       	adiw	r28, 0x1b	; 27
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <LCD_GO_TO>:

u8 LCD_GO_TO(u8 line , u8 colummn){
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <LCD_GO_TO+0x6>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <LCD_GO_TO+0x8>
    2028:	0f 92       	push	r0
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_error_state = STD_TYPES_OK;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
	
	if( colummn<=39){
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	88 32       	cpi	r24, 0x28	; 40
    203a:	d8 f4       	brcc	.+54     	; 0x2072 <LCD_GO_TO+0x52>
		
		switch(line){
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3d 83       	std	Y+5, r19	; 0x05
    2044:	2c 83       	std	Y+4, r18	; 0x04
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	31 f0       	breq	.+12     	; 0x205a <LCD_GO_TO+0x3a>
    204e:	2c 81       	ldd	r18, Y+4	; 0x04
    2050:	3d 81       	ldd	r19, Y+5	; 0x05
    2052:	21 30       	cpi	r18, 0x01	; 1
    2054:	31 05       	cpc	r19, r1
    2056:	31 f0       	breq	.+12     	; 0x2064 <LCD_GO_TO+0x44>
    2058:	0a c0       	rjmp	.+20     	; 0x206e <LCD_GO_TO+0x4e>
			case line1:  LCD_WRITE_COMMAND(0x80 +colummn ); break ;
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	80 58       	subi	r24, 0x80	; 128
    205e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
    2062:	08 c0       	rjmp	.+16     	; 0x2074 <LCD_GO_TO+0x54>
			
			case line2:  LCD_WRITE_COMMAND(0xc0 +colummn ); break ;
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	80 54       	subi	r24, 0x40	; 64
    2068:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <LCD_GO_TO+0x54>
			default:local_error_state = STD_TYPES_NOK;
    206e:	19 82       	std	Y+1, r1	; 0x01
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <LCD_GO_TO+0x54>
			
		}
	}
	
	else{
		local_error_state = STD_TYPES_NOK;
    2072:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return  local_error_state ;
    2074:	89 81       	ldd	r24, Y+1	; 0x01
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <LCD_store_customchar>:

void LCD_store_customchar(u8 index,u8 *customchar){  // number of pattern  
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <LCD_store_customchar+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <LCD_store_customchar+0x8>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	8a 83       	std	Y+2, r24	; 0x02
    2094:	7c 83       	std	Y+4, r23	; 0x04
    2096:	6b 83       	std	Y+3, r22	; 0x03
	if(index<8){
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	88 30       	cpi	r24, 0x08	; 8
    209c:	18 f5       	brcc	.+70     	; 0x20e4 <LCD_store_customchar+0x5e>
		LCD_WRITE_COMMAND(CG_RAM_ADDRESS +index*8);
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	08 96       	adiw	r24, 0x08	; 8
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
		for(u8 i=0;i<8;i++){
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	0e c0       	rjmp	.+28     	; 0x20d6 <LCD_store_customchar+0x50>
			LCD_WRITE_Char(customchar[i]);
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	e2 0f       	add	r30, r18
    20c8:	f3 1f       	adc	r31, r19
    20ca:	80 81       	ld	r24, Z
    20cc:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
}

void LCD_store_customchar(u8 index,u8 *customchar){  // number of pattern  
	if(index<8){
		LCD_WRITE_COMMAND(CG_RAM_ADDRESS +index*8);
		for(u8 i=0;i<8;i++){
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	88 30       	cpi	r24, 0x08	; 8
    20da:	78 f3       	brcs	.-34     	; 0x20ba <LCD_store_customchar+0x34>
			LCD_WRITE_Char(customchar[i]);
		}
	    LCD_GO_TO(line1 , 1) ;	 
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	61 e0       	ldi	r22, 0x01	; 1
    20e0:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_GO_TO>
	}
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <LCD_DISPLAY_CUSTOM_CHAR>:
//***************************************************
void LCD_DISPLAY_CUSTOM_CHAR(u8 index){
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	0f 92       	push	r0
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	89 83       	std	Y+1, r24	; 0x01
	if(index<8){
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	88 30       	cpi	r24, 0x08	; 8
    2102:	18 f4       	brcc	.+6      	; 0x210a <LCD_DISPLAY_CUSTOM_CHAR+0x18>
		LCD_WRITE_Char(index);
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
	}
}
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <Lcd_float_number>:


void Lcd_float_number(f64 num ){
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	29 97       	sbiw	r28, 0x09	; 9
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	6e 83       	std	Y+6, r22	; 0x06
    2128:	7f 83       	std	Y+7, r23	; 0x07
    212a:	88 87       	std	Y+8, r24	; 0x08
    212c:	99 87       	std	Y+9, r25	; 0x09
	u8 arr[5];
	sprintf(arr , "%f" , num);
    212e:	8d b7       	in	r24, 0x3d	; 61
    2130:	9e b7       	in	r25, 0x3e	; 62
    2132:	08 97       	sbiw	r24, 0x08	; 8
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	9e bf       	out	0x3e, r25	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	8d bf       	out	0x3d, r24	; 61
    213e:	ed b7       	in	r30, 0x3d	; 61
    2140:	fe b7       	in	r31, 0x3e	; 62
    2142:	31 96       	adiw	r30, 0x01	; 1
    2144:	ce 01       	movw	r24, r28
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
    214c:	80 e6       	ldi	r24, 0x60	; 96
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	93 83       	std	Z+3, r25	; 0x03
    2152:	82 83       	std	Z+2, r24	; 0x02
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	9f 81       	ldd	r25, Y+7	; 0x07
    2158:	a8 85       	ldd	r26, Y+8	; 0x08
    215a:	b9 85       	ldd	r27, Y+9	; 0x09
    215c:	84 83       	std	Z+4, r24	; 0x04
    215e:	95 83       	std	Z+5, r25	; 0x05
    2160:	a6 83       	std	Z+6, r26	; 0x06
    2162:	b7 83       	std	Z+7, r27	; 0x07
    2164:	0e 94 c2 18 	call	0x3184	; 0x3184 <sprintf>
    2168:	8d b7       	in	r24, 0x3d	; 61
    216a:	9e b7       	in	r25, 0x3e	; 62
    216c:	08 96       	adiw	r24, 0x08	; 8
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	9e bf       	out	0x3e, r25	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	8d bf       	out	0x3d, r24	; 61
	LCD_WRITE_STRING(arr);
    2178:	ce 01       	movw	r24, r28
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
}
    2180:	29 96       	adiw	r28, 0x09	; 9
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <main>:
s32 sub(s16 num1 , s16 num2);
s32 multip(s16 num1 , s16 num2);
f64 div(s16 num1 , s16 num2);
double calculate_root(double number);
s32 modules (s16 num1 , s16 num2);
int main(){
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	a6 97       	sbiw	r28, 0x26	; 38
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
	u8 pinvalue;
	DIO_voidInit();
    21a6:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_voidInit>
	LCD_INIT();
    21aa:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_INIT>
u8 sign ;
s16 num_1=0 ;
    21ae:	18 a2       	std	Y+32, r1	; 0x20
    21b0:	1f 8e       	std	Y+31, r1	; 0x1f
s16 num_2=0 ;
    21b2:	1e 8e       	std	Y+30, r1	; 0x1e
    21b4:	1d 8e       	std	Y+29, r1	; 0x1d
u8 sign_1;
u8 sign_2;
s16 ans ;
u8 flage =0 ;
    21b6:	18 8e       	std	Y+24, r1	; 0x18
f64 ans_float;
f32 decimal ;
u8 flage2 =0;
    21b8:	1f 86       	std	Y+15, r1	; 0x0f
u8 clear =0 ;
    21ba:	1e 86       	std	Y+14, r1	; 0x0e
u8 minus =0;
    21bc:	1d 86       	std	Y+13, r1	; 0x0d
u8 minus2=0;
    21be:	1c 86       	std	Y+12, r1	; 0x0c
u8 f1 =0;
    21c0:	1b 86       	std	Y+11, r1	; 0x0b
u8 contin_ans =0 ;
    21c2:	1a 86       	std	Y+10, r1	; 0x0a
u8 minus_2 =0 ;
    21c4:	19 86       	std	Y+9, r1	; 0x09
//			 sign_2 = pinvalue;
//			 LCD_WRITE_Char(pinvalue);
//			break ;
//	}
 do{
	 if(contin_ans==1){
    21c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	39 f0       	breq	.+14     	; 0x21da <main+0x48>
		 break;
	 }
	KPD_u8KpdGetKeyState(&pinvalue);
    21cc:	ce 01       	movw	r24, r28
    21ce:	82 96       	adiw	r24, 0x22	; 34
    21d0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>

	}while(pinvalue == Kpd_keynotpressed);
    21d4:	8a a1       	ldd	r24, Y+34	; 0x22
    21d6:	8f 3f       	cpi	r24, 0xFF	; 255
    21d8:	b1 f3       	breq	.-20     	; 0x21c6 <main+0x34>
	 sign_1 = pinvalue -'0';
    21da:	8a a1       	ldd	r24, Y+34	; 0x22
    21dc:	80 53       	subi	r24, 0x30	; 48
    21de:	8c 8f       	std	Y+28, r24	; 0x1c
     sign_2 = pinvalue;
    21e0:	8a a1       	ldd	r24, Y+34	; 0x22
    21e2:	8b 8f       	std	Y+27, r24	; 0x1b
       flage =0;
    21e4:	18 8e       	std	Y+24, r1	; 0x18
		 if(sign_1 >=0 && sign_1<=9 ){
    21e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21e8:	8a 30       	cpi	r24, 0x0A	; 10
    21ea:	e8 f4       	brcc	.+58     	; 0x2226 <main+0x94>
			 if(contin_ans==1){
    21ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	51 f3       	breq	.-44     	; 0x21c6 <main+0x34>
				continue ;}
			LCD_WRITE_Char(pinvalue);
    21f2:	8a a1       	ldd	r24, Y+34	; 0x22
    21f4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
			num_1 = (num_1*10) + (pinvalue -'0');
    21f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21fa:	98 a1       	ldd	r25, Y+32	; 0x20
    21fc:	9c 01       	movw	r18, r24
    21fe:	22 0f       	add	r18, r18
    2200:	33 1f       	adc	r19, r19
    2202:	c9 01       	movw	r24, r18
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	28 0f       	add	r18, r24
    220e:	39 1f       	adc	r19, r25
    2210:	8a a1       	ldd	r24, Y+34	; 0x22
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	c0 97       	sbiw	r24, 0x30	; 48
    2218:	82 0f       	add	r24, r18
    221a:	93 1f       	adc	r25, r19
    221c:	98 a3       	std	Y+32, r25	; 0x20
    221e:	8f 8f       	std	Y+31, r24	; 0x1f
			f1=1 ;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	8b 87       	std	Y+11, r24	; 0x0b
    2224:	d0 cf       	rjmp	.-96     	; 0x21c6 <main+0x34>
  }

	else if( (pinvalue=='-' || pinvalue=='_') && f1 ==0){
    2226:	8a a1       	ldd	r24, Y+34	; 0x22
    2228:	8d 32       	cpi	r24, 0x2D	; 45
    222a:	19 f0       	breq	.+6      	; 0x2232 <main+0xa0>
    222c:	8a a1       	ldd	r24, Y+34	; 0x22
    222e:	8f 35       	cpi	r24, 0x5F	; 95
    2230:	49 f4       	brne	.+18     	; 0x2244 <main+0xb2>
    2232:	8b 85       	ldd	r24, Y+11	; 0x0b
    2234:	88 23       	and	r24, r24
    2236:	31 f4       	brne	.+12     	; 0x2244 <main+0xb2>
			LCD_WRITE_Char('-');
    2238:	8d e2       	ldi	r24, 0x2D	; 45
    223a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
				 minus2=1 ;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	8c 87       	std	Y+12, r24	; 0x0c
    2242:	c1 cf       	rjmp	.-126    	; 0x21c6 <main+0x34>

			}
	else if( pinvalue== '='){
    2244:	8a a1       	ldd	r24, Y+34	; 0x22
    2246:	8d 33       	cpi	r24, 0x3D	; 61
    2248:	f9 f4       	brne	.+62     	; 0x2288 <main+0xf6>

		LCD_WRITE_Char('=');
    224a:	8d e3       	ldi	r24, 0x3D	; 61
    224c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
		if(minus2==1){
    2250:	8c 85       	ldd	r24, Y+12	; 0x0c
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	71 f4       	brne	.+28     	; 0x2272 <main+0xe0>
		Lcd_voidDisplayNumber(-num_1);}
    2256:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2258:	98 a1       	ldd	r25, Y+32	; 0x20
    225a:	90 95       	com	r25
    225c:	81 95       	neg	r24
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	aa 27       	eor	r26, r26
    2262:	97 fd       	sbrc	r25, 7
    2264:	a0 95       	com	r26
    2266:	ba 2f       	mov	r27, r26
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
    2270:	52 c0       	rjmp	.+164    	; 0x2316 <main+0x184>
		else
		{
			Lcd_voidDisplayNumber(num_1);
    2272:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2274:	98 a1       	ldd	r25, Y+32	; 0x20
    2276:	aa 27       	eor	r26, r26
    2278:	97 fd       	sbrc	r25, 7
    227a:	a0 95       	com	r26
    227c:	ba 2f       	mov	r27, r26
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
    2286:	47 c0       	rjmp	.+142    	; 0x2316 <main+0x184>
		}
		break ;}
	else if( pinvalue=='s'){
    2288:	8a a1       	ldd	r24, Y+34	; 0x22
    228a:	83 37       	cpi	r24, 0x73	; 115
    228c:	81 f4       	brne	.+32     	; 0x22ae <main+0x11c>
		if(minus2==1){
    228e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	39 f4       	brne	.+14     	; 0x22a2 <main+0x110>
		 num_1*=-1 ;
    2294:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2296:	98 a1       	ldd	r25, Y+32	; 0x20
    2298:	90 95       	com	r25
    229a:	81 95       	neg	r24
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	98 a3       	std	Y+32, r25	; 0x20
    22a0:	8f 8f       	std	Y+31, r24	; 0x1f
		}
		sign_2 = pinvalue;
    22a2:	8a a1       	ldd	r24, Y+34	; 0x22
    22a4:	8b 8f       	std	Y+27, r24	; 0x1b
		LCD_WRITE_Char('^');
    22a6:	8e e5       	ldi	r24, 0x5E	; 94
    22a8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
    22ac:	34 c0       	rjmp	.+104    	; 0x2316 <main+0x184>
		break ;
	}
	else if( pinvalue=='a'){
    22ae:	8a a1       	ldd	r24, Y+34	; 0x22
    22b0:	81 36       	cpi	r24, 0x61	; 97
    22b2:	c9 f4       	brne	.+50     	; 0x22e6 <main+0x154>
		    num_1= ans ;
    22b4:	89 8d       	ldd	r24, Y+25	; 0x19
    22b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22b8:	98 a3       	std	Y+32, r25	; 0x20
    22ba:	8f 8f       	std	Y+31, r24	; 0x1f
		    LCD_WRITE_COMMAND(lcd_Clear);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
		    LCD_WRITE_STRING("ANS");
    22c2:	83 e6       	ldi	r24, 0x63	; 99
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
		    contin_ans=0;
    22ca:	1a 86       	std	Y+10, r1	; 0x0a
		     do{
	      	KPD_u8KpdGetKeyState(&pinvalue);
    22cc:	ce 01       	movw	r24, r28
    22ce:	82 96       	adiw	r24, 0x22	; 34
    22d0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
	       }while(pinvalue == Kpd_keynotpressed);
    22d4:	8a a1       	ldd	r24, Y+34	; 0x22
    22d6:	8f 3f       	cpi	r24, 0xFF	; 255
    22d8:	c9 f3       	breq	.-14     	; 0x22cc <main+0x13a>
	       sign_2 = pinvalue;
    22da:	8a a1       	ldd	r24, Y+34	; 0x22
    22dc:	8b 8f       	std	Y+27, r24	; 0x1b
	       LCD_WRITE_Char(pinvalue);
    22de:	8a a1       	ldd	r24, Y+34	; 0x22
    22e0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
    22e4:	18 c0       	rjmp	.+48     	; 0x2316 <main+0x184>
		 						break ;

		 	}
	else if(pinvalue == 'c'){
    22e6:	8a a1       	ldd	r24, Y+34	; 0x22
    22e8:	83 36       	cpi	r24, 0x63	; 99
    22ea:	31 f4       	brne	.+12     	; 0x22f8 <main+0x166>
		clear=1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	8e 87       	std	Y+14, r24	; 0x0e
		  LCD_WRITE_COMMAND(lcd_Clear);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <main+0x184>
		break ;
		}

	else{
		if(minus2==1){
    22f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    22fa:	81 30       	cpi	r24, 0x01	; 1
    22fc:	39 f4       	brne	.+14     	; 0x230c <main+0x17a>
			num_1*=-1 ;
    22fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2300:	98 a1       	ldd	r25, Y+32	; 0x20
    2302:	90 95       	com	r25
    2304:	81 95       	neg	r24
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	98 a3       	std	Y+32, r25	; 0x20
    230a:	8f 8f       	std	Y+31, r24	; 0x1f
				}
		sign_2 = pinvalue;
    230c:	8a a1       	ldd	r24, Y+34	; 0x22
    230e:	8b 8f       	std	Y+27, r24	; 0x1b
		LCD_WRITE_Char(pinvalue);
    2310:	8a a1       	ldd	r24, Y+34	; 0x22
    2312:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
	}
}



if(clear ==1){
    2316:	8e 85       	ldd	r24, Y+14	; 0x0e
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	51 f4       	brne	.+20     	; 0x2330 <main+0x19e>
	num_1=0 ;
    231c:	18 a2       	std	Y+32, r1	; 0x20
    231e:	1f 8e       	std	Y+31, r1	; 0x1f
	num_2=0 ;
    2320:	1e 8e       	std	Y+30, r1	; 0x1e
    2322:	1d 8e       	std	Y+29, r1	; 0x1d
	flage2 =0;
    2324:	1f 86       	std	Y+15, r1	; 0x0f
	clear =0 ;
    2326:	1e 86       	std	Y+14, r1	; 0x0e
	minus =0;
    2328:	1d 86       	std	Y+13, r1	; 0x0d
	minus2=0;
    232a:	1c 86       	std	Y+12, r1	; 0x0c
	f1 =0;
    232c:	1b 86       	std	Y+11, r1	; 0x0b
    232e:	4b cf       	rjmp	.-362    	; 0x21c6 <main+0x34>
/*  NUMBER 2 */

while(1){

 do{
		KPD_u8KpdGetKeyState(&pinvalue);
    2330:	ce 01       	movw	r24, r28
    2332:	82 96       	adiw	r24, 0x22	; 34
    2334:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
	}while(pinvalue == Kpd_keynotpressed);
    2338:	8a a1       	ldd	r24, Y+34	; 0x22
    233a:	8f 3f       	cpi	r24, 0xFF	; 255
    233c:	c9 f3       	breq	.-14     	; 0x2330 <main+0x19e>
	 sign_1 = pinvalue -'0';
    233e:	8a a1       	ldd	r24, Y+34	; 0x22
    2340:	80 53       	subi	r24, 0x30	; 48
    2342:	8c 8f       	std	Y+28, r24	; 0x1c
	 flage =0;
    2344:	18 8e       	std	Y+24, r1	; 0x18
	if(sign_1 >=0 && sign_1<=9  ){
    2346:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2348:	8a 30       	cpi	r24, 0x0A	; 10
    234a:	c0 f4       	brcc	.+48     	; 0x237c <main+0x1ea>
			LCD_WRITE_Char(pinvalue);
    234c:	8a a1       	ldd	r24, Y+34	; 0x22
    234e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
			num_2 = (num_2*10) + (pinvalue -'0');
    2352:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2354:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2356:	9c 01       	movw	r18, r24
    2358:	22 0f       	add	r18, r18
    235a:	33 1f       	adc	r19, r19
    235c:	c9 01       	movw	r24, r18
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	28 0f       	add	r18, r24
    2368:	39 1f       	adc	r19, r25
    236a:	8a a1       	ldd	r24, Y+34	; 0x22
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	c0 97       	sbiw	r24, 0x30	; 48
    2372:	82 0f       	add	r24, r18
    2374:	93 1f       	adc	r25, r19
    2376:	9e 8f       	std	Y+30, r25	; 0x1e
    2378:	8d 8f       	std	Y+29, r24	; 0x1d
    237a:	da cf       	rjmp	.-76     	; 0x2330 <main+0x19e>

  }
	else if( (pinvalue=='-' || pinvalue=='_')){
    237c:	8a a1       	ldd	r24, Y+34	; 0x22
    237e:	8d 32       	cpi	r24, 0x2D	; 45
    2380:	19 f0       	breq	.+6      	; 0x2388 <main+0x1f6>
    2382:	8a a1       	ldd	r24, Y+34	; 0x22
    2384:	8f 35       	cpi	r24, 0x5F	; 95
    2386:	31 f4       	brne	.+12     	; 0x2394 <main+0x202>
		LCD_WRITE_Char('-');
    2388:	8d e2       	ldi	r24, 0x2D	; 45
    238a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
		minus=1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	8d 87       	std	Y+13, r24	; 0x0d
    2392:	ce cf       	rjmp	.-100    	; 0x2330 <main+0x19e>
	}
	else  if( pinvalue=='=') {
    2394:	8a a1       	ldd	r24, Y+34	; 0x22
    2396:	8d 33       	cpi	r24, 0x3D	; 61
    2398:	71 f4       	brne	.+28     	; 0x23b6 <main+0x224>
		if(minus==1){
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	39 f4       	brne	.+14     	; 0x23ae <main+0x21c>
		  num_2*=-1 ;
    23a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a4:	90 95       	com	r25
    23a6:	81 95       	neg	r24
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	9e 8f       	std	Y+30, r25	; 0x1e
    23ac:	8d 8f       	std	Y+29, r24	; 0x1d
				}
		LCD_WRITE_Char('=');
    23ae:	8d e3       	ldi	r24, 0x3D	; 61
    23b0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
    23b4:	08 c0       	rjmp	.+16     	; 0x23c6 <main+0x234>
		break ;}
	else if(pinvalue == 'c'){
    23b6:	8a a1       	ldd	r24, Y+34	; 0x22
    23b8:	83 36       	cpi	r24, 0x63	; 99
    23ba:	29 f4       	brne	.+10     	; 0x23c6 <main+0x234>
	clear=1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8e 87       	std	Y+14, r24	; 0x0e
	  LCD_WRITE_COMMAND(lcd_Clear);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>

		break ;
	}
}

if(clear ==1){
    23c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	51 f4       	brne	.+20     	; 0x23e0 <main+0x24e>
	num_1=0 ;
    23cc:	18 a2       	std	Y+32, r1	; 0x20
    23ce:	1f 8e       	std	Y+31, r1	; 0x1f
	num_2=0 ;
    23d0:	1e 8e       	std	Y+30, r1	; 0x1e
    23d2:	1d 8e       	std	Y+29, r1	; 0x1d

	flage2 =0;
    23d4:	1f 86       	std	Y+15, r1	; 0x0f
	clear =0 ;
    23d6:	1e 86       	std	Y+14, r1	; 0x0e
	minus =0;
    23d8:	1d 86       	std	Y+13, r1	; 0x0d
	minus2=0;
    23da:	1c 86       	std	Y+12, r1	; 0x0c
	f1 =0;
    23dc:	1b 86       	std	Y+11, r1	; 0x0b
    23de:	f3 ce       	rjmp	.-538    	; 0x21c6 <main+0x34>
	continue;
}

if(minus==1 &&  minus2==1){
    23e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	29 f4       	brne	.+10     	; 0x23f0 <main+0x25e>
    23e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	11 f4       	brne	.+4      	; 0x23f0 <main+0x25e>
	minus_2=1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	89 87       	std	Y+9, r24	; 0x09
}

/*  OPERATION */
switch(sign_2){
    23f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	3e a3       	std	Y+38, r19	; 0x26
    23f8:	2d a3       	std	Y+37, r18	; 0x25
    23fa:	4d a1       	ldd	r20, Y+37	; 0x25
    23fc:	5e a1       	ldd	r21, Y+38	; 0x26
    23fe:	4f 35       	cpi	r20, 0x5F	; 95
    2400:	51 05       	cpc	r21, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <main+0x274>
    2404:	4c c0       	rjmp	.+152    	; 0x249e <main+0x30c>
    2406:	8d a1       	ldd	r24, Y+37	; 0x25
    2408:	9e a1       	ldd	r25, Y+38	; 0x26
    240a:	80 36       	cpi	r24, 0x60	; 96
    240c:	91 05       	cpc	r25, r1
    240e:	94 f4       	brge	.+36     	; 0x2434 <main+0x2a2>
    2410:	2d a1       	ldd	r18, Y+37	; 0x25
    2412:	3e a1       	ldd	r19, Y+38	; 0x26
    2414:	2b 32       	cpi	r18, 0x2B	; 43
    2416:	31 05       	cpc	r19, r1
    2418:	d1 f0       	breq	.+52     	; 0x244e <main+0x2bc>
    241a:	4d a1       	ldd	r20, Y+37	; 0x25
    241c:	5e a1       	ldd	r21, Y+38	; 0x26
    241e:	4f 32       	cpi	r20, 0x2F	; 47
    2420:	51 05       	cpc	r21, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <main+0x294>
    2424:	96 c0       	rjmp	.+300    	; 0x2552 <main+0x3c0>
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	9e a1       	ldd	r25, Y+38	; 0x26
    242a:	85 32       	cpi	r24, 0x25	; 37
    242c:	91 05       	cpc	r25, r1
    242e:	09 f4       	brne	.+2      	; 0x2432 <main+0x2a0>
    2430:	39 c3       	rjmp	.+1650   	; 0x2aa4 <main+0x912>
    2432:	5f c3       	rjmp	.+1726   	; 0x2af2 <main+0x960>
    2434:	2d a1       	ldd	r18, Y+37	; 0x25
    2436:	3e a1       	ldd	r19, Y+38	; 0x26
    2438:	23 37       	cpi	r18, 0x73	; 115
    243a:	31 05       	cpc	r19, r1
    243c:	09 f4       	brne	.+2      	; 0x2440 <main+0x2ae>
    243e:	74 c2       	rjmp	.+1256   	; 0x2928 <main+0x796>
    2440:	4d a1       	ldd	r20, Y+37	; 0x25
    2442:	5e a1       	ldd	r21, Y+38	; 0x26
    2444:	48 37       	cpi	r20, 0x78	; 120
    2446:	51 05       	cpc	r21, r1
    2448:	09 f4       	brne	.+2      	; 0x244c <main+0x2ba>
    244a:	5b c0       	rjmp	.+182    	; 0x2502 <main+0x370>
    244c:	52 c3       	rjmp	.+1700   	; 0x2af2 <main+0x960>

 case '+':
	 if(flage ==0 ){
    244e:	88 8d       	ldd	r24, Y+24	; 0x18
    2450:	88 23       	and	r24, r24
    2452:	d9 f4       	brne	.+54     	; 0x248a <main+0x2f8>
	 ans= sum(num_1 ,num_2);
    2454:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2456:	98 a1       	ldd	r25, Y+32	; 0x20
    2458:	2d 8d       	ldd	r18, Y+29	; 0x1d
    245a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    245c:	b9 01       	movw	r22, r18
    245e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <sum>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9a 8f       	std	Y+26, r25	; 0x1a
    2468:	89 8f       	std	Y+25, r24	; 0x19
	 Lcd_voidDisplayNumber(ans);
    246a:	89 8d       	ldd	r24, Y+25	; 0x19
    246c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    246e:	aa 27       	eor	r26, r26
    2470:	97 fd       	sbrc	r25, 7
    2472:	a0 95       	com	r26
    2474:	ba 2f       	mov	r27, r26
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
	 flage =1 ;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	88 8f       	std	Y+24, r24	; 0x18
	 num_1=0;
    2482:	18 a2       	std	Y+32, r1	; 0x20
    2484:	1f 8e       	std	Y+31, r1	; 0x1f
	 num_2=0 ;
    2486:	1e 8e       	std	Y+30, r1	; 0x1e
    2488:	1d 8e       	std	Y+29, r1	; 0x1d
  }
  do{
	  KPD_u8KpdGetKeyState(&pinvalue);
    248a:	ce 01       	movw	r24, r28
    248c:	82 96       	adiw	r24, 0x22	; 34
    248e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
	  sign = pinvalue;
    2492:	8a a1       	ldd	r24, Y+34	; 0x22
    2494:	89 a3       	std	Y+33, r24	; 0x21
	 }while(pinvalue == Kpd_keynotpressed);
    2496:	8a a1       	ldd	r24, Y+34	; 0x22
    2498:	8f 3f       	cpi	r24, 0xFF	; 255
    249a:	b9 f3       	breq	.-18     	; 0x248a <main+0x2f8>
    249c:	2a c3       	rjmp	.+1620   	; 0x2af2 <main+0x960>
		  break ;

 case '_':
	 if(flage ==0 ){
    249e:	88 8d       	ldd	r24, Y+24	; 0x18
    24a0:	88 23       	and	r24, r24
    24a2:	29 f5       	brne	.+74     	; 0x24ee <main+0x35c>
		 if(minus==1){
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	81 30       	cpi	r24, 0x01	; 1
    24a8:	39 f4       	brne	.+14     	; 0x24b8 <main+0x326>
			 num_2 *=-1;
    24aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ae:	90 95       	com	r25
    24b0:	81 95       	neg	r24
    24b2:	9f 4f       	sbci	r25, 0xFF	; 255
    24b4:	9e 8f       	std	Y+30, r25	; 0x1e
    24b6:	8d 8f       	std	Y+29, r24	; 0x1d
		 }
	 ans= sub(num_1 ,num_2);
    24b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ba:	98 a1       	ldd	r25, Y+32	; 0x20
    24bc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    24be:	3e 8d       	ldd	r19, Y+30	; 0x1e
    24c0:	b9 01       	movw	r22, r18
    24c2:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sub>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9a 8f       	std	Y+26, r25	; 0x1a
    24cc:	89 8f       	std	Y+25, r24	; 0x19
	 Lcd_voidDisplayNumber(ans);
    24ce:	89 8d       	ldd	r24, Y+25	; 0x19
    24d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24d2:	aa 27       	eor	r26, r26
    24d4:	97 fd       	sbrc	r25, 7
    24d6:	a0 95       	com	r26
    24d8:	ba 2f       	mov	r27, r26
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
	flage =1 ;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	88 8f       	std	Y+24, r24	; 0x18
	 num_1=0;
    24e6:	18 a2       	std	Y+32, r1	; 0x20
    24e8:	1f 8e       	std	Y+31, r1	; 0x1f
	 num_2=0 ;
    24ea:	1e 8e       	std	Y+30, r1	; 0x1e
    24ec:	1d 8e       	std	Y+29, r1	; 0x1d
		  }

  do{
	   KPD_u8KpdGetKeyState(&pinvalue);
    24ee:	ce 01       	movw	r24, r28
    24f0:	82 96       	adiw	r24, 0x22	; 34
    24f2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
	 	sign = pinvalue;
    24f6:	8a a1       	ldd	r24, Y+34	; 0x22
    24f8:	89 a3       	std	Y+33, r24	; 0x21
}while(pinvalue == Kpd_keynotpressed);
    24fa:	8a a1       	ldd	r24, Y+34	; 0x22
    24fc:	8f 3f       	cpi	r24, 0xFF	; 255
    24fe:	b9 f3       	breq	.-18     	; 0x24ee <main+0x35c>
    2500:	f8 c2       	rjmp	.+1520   	; 0x2af2 <main+0x960>
	 		 break ;

 case 'x':
	  if(flage ==0 ){
    2502:	88 8d       	ldd	r24, Y+24	; 0x18
    2504:	88 23       	and	r24, r24
    2506:	d9 f4       	brne	.+54     	; 0x253e <main+0x3ac>
	  ans= multip(num_1 ,num_2);
    2508:	8f 8d       	ldd	r24, Y+31	; 0x1f
    250a:	98 a1       	ldd	r25, Y+32	; 0x20
    250c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    250e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2510:	b9 01       	movw	r22, r18
    2512:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <multip>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9a 8f       	std	Y+26, r25	; 0x1a
    251c:	89 8f       	std	Y+25, r24	; 0x19
	  Lcd_voidDisplayNumber(ans);
    251e:	89 8d       	ldd	r24, Y+25	; 0x19
    2520:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2522:	aa 27       	eor	r26, r26
    2524:	97 fd       	sbrc	r25, 7
    2526:	a0 95       	com	r26
    2528:	ba 2f       	mov	r27, r26
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
	 flage =1 ;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	88 8f       	std	Y+24, r24	; 0x18
	  num_1=0;
    2536:	18 a2       	std	Y+32, r1	; 0x20
    2538:	1f 8e       	std	Y+31, r1	; 0x1f
 	 num_2=0 ;
    253a:	1e 8e       	std	Y+30, r1	; 0x1e
    253c:	1d 8e       	std	Y+29, r1	; 0x1d
  }

  do{
 KPD_u8KpdGetKeyState(&pinvalue);
    253e:	ce 01       	movw	r24, r28
    2540:	82 96       	adiw	r24, 0x22	; 34
    2542:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
 sign = pinvalue;
    2546:	8a a1       	ldd	r24, Y+34	; 0x22
    2548:	89 a3       	std	Y+33, r24	; 0x21
 		}while(pinvalue == Kpd_keynotpressed);
    254a:	8a a1       	ldd	r24, Y+34	; 0x22
    254c:	8f 3f       	cpi	r24, 0xFF	; 255
    254e:	b9 f3       	breq	.-18     	; 0x253e <main+0x3ac>
    2550:	d0 c2       	rjmp	.+1440   	; 0x2af2 <main+0x960>
  break ;

 case '/':
  if(flage ==0 ){
    2552:	88 8d       	ldd	r24, Y+24	; 0x18
    2554:	88 23       	and	r24, r24
    2556:	09 f0       	breq	.+2      	; 0x255a <main+0x3c8>
    2558:	dd c1       	rjmp	.+954    	; 0x2914 <main+0x782>
  ans_float= div(num_1 ,num_2);
    255a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    255c:	98 a1       	ldd	r25, Y+32	; 0x20
    255e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2560:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2562:	b9 01       	movw	r22, r18
    2564:	0e 94 01 17 	call	0x2e02	; 0x2e02 <div>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	8c 8b       	std	Y+20, r24	; 0x14
    256e:	9d 8b       	std	Y+21, r25	; 0x15
    2570:	ae 8b       	std	Y+22, r26	; 0x16
    2572:	bf 8b       	std	Y+23, r27	; 0x17
  ans=(s32) div(num_1 ,num_2);
    2574:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2576:	98 a1       	ldd	r25, Y+32	; 0x20
    2578:	2d 8d       	ldd	r18, Y+29	; 0x1d
    257a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    257c:	b9 01       	movw	r22, r18
    257e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <div>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9a 8f       	std	Y+26, r25	; 0x1a
    2594:	89 8f       	std	Y+25, r24	; 0x19
  f64 deci = ans_float-ans;
    2596:	89 8d       	ldd	r24, Y+25	; 0x19
    2598:	9a 8d       	ldd	r25, Y+26	; 0x1a
    259a:	aa 27       	eor	r26, r26
    259c:	97 fd       	sbrc	r25, 7
    259e:	a0 95       	com	r26
    25a0:	ba 2f       	mov	r27, r26
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    25aa:	9b 01       	movw	r18, r22
    25ac:	ac 01       	movw	r20, r24
    25ae:	6c 89       	ldd	r22, Y+20	; 0x14
    25b0:	7d 89       	ldd	r23, Y+21	; 0x15
    25b2:	8e 89       	ldd	r24, Y+22	; 0x16
    25b4:	9f 89       	ldd	r25, Y+23	; 0x17
    25b6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	af 83       	std	Y+7, r26	; 0x07
    25c4:	b8 87       	std	Y+8, r27	; 0x08
 if(num_2 ==0 ){
    25c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	81 f4       	brne	.+32     	; 0x25ee <main+0x45c>
 LCD_WRITE_COMMAND(lcd_Clear);
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
 LCD_WRITE_STRING("Error:Division");
    25d4:	87 e6       	ldi	r24, 0x67	; 103
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>

 LCD_GO_TO(line2,0);
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_GO_TO>
  LCD_WRITE_STRING("by 0 is undefined");
    25e4:	86 e7       	ldi	r24, 0x76	; 118
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
    25ec:	93 c1       	rjmp	.+806    	; 0x2914 <main+0x782>
	 			}
 else if(deci ==0  ){
    25ee:	6d 81       	ldd	r22, Y+5	; 0x05
    25f0:	7e 81       	ldd	r23, Y+6	; 0x06
    25f2:	8f 81       	ldd	r24, Y+7	; 0x07
    25f4:	98 85       	ldd	r25, Y+8	; 0x08
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2602:	88 23       	and	r24, r24
    2604:	09 f5       	brne	.+66     	; 0x2648 <main+0x4b6>
    Lcd_voidDisplayNumber(ans);
    2606:	89 8d       	ldd	r24, Y+25	; 0x19
    2608:	9a 8d       	ldd	r25, Y+26	; 0x1a
    260a:	aa 27       	eor	r26, r26
    260c:	97 fd       	sbrc	r25, 7
    260e:	a0 95       	com	r26
    2610:	ba 2f       	mov	r27, r26
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
    flage =1 ;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	88 8f       	std	Y+24, r24	; 0x18
    num_1=0;
    261e:	18 a2       	std	Y+32, r1	; 0x20
    2620:	1f 8e       	std	Y+31, r1	; 0x1f
     num_2=0 ;
    2622:	1e 8e       	std	Y+30, r1	; 0x1e
    2624:	1d 8e       	std	Y+29, r1	; 0x1d
     deci=0;
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	af 83       	std	Y+7, r26	; 0x07
    2634:	b8 87       	std	Y+8, r27	; 0x08
     ans_float=0;}
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e0       	ldi	r26, 0x00	; 0
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	8c 8b       	std	Y+20, r24	; 0x14
    2640:	9d 8b       	std	Y+21, r25	; 0x15
    2642:	ae 8b       	std	Y+22, r26	; 0x16
    2644:	bf 8b       	std	Y+23, r27	; 0x17
    2646:	66 c1       	rjmp	.+716    	; 0x2914 <main+0x782>
 else{
if((minus==1 || minus2==1)&& minus_2==0){
    2648:	8d 85       	ldd	r24, Y+13	; 0x0d
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	21 f0       	breq	.+8      	; 0x2656 <main+0x4c4>
    264e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	09 f0       	breq	.+2      	; 0x2656 <main+0x4c4>
    2654:	84 c0       	rjmp	.+264    	; 0x275e <main+0x5cc>
    2656:	89 85       	ldd	r24, Y+9	; 0x09
    2658:	88 23       	and	r24, r24
    265a:	09 f0       	breq	.+2      	; 0x265e <main+0x4cc>
    265c:	80 c0       	rjmp	.+256    	; 0x275e <main+0x5cc>
 Lcd_voidDisplayNumber(ans);
    265e:	89 8d       	ldd	r24, Y+25	; 0x19
    2660:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2662:	aa 27       	eor	r26, r26
    2664:	97 fd       	sbrc	r25, 7
    2666:	a0 95       	com	r26
    2668:	ba 2f       	mov	r27, r26
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
   if(ans==0){
    2672:	89 8d       	ldd	r24, Y+25	; 0x19
    2674:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	81 f5       	brne	.+96     	; 0x26da <main+0x548>
    LCD_WRITE_STRING("-0");
    267a:	88 e8       	ldi	r24, 0x88	; 136
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
    LCD_WRITE_Char('.');
    2682:	8e e2       	ldi	r24, 0x2E	; 46
    2684:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
    Lcd_voidDisplayNumber((ans_float-ans)*-100.0);}
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    268c:	aa 27       	eor	r26, r26
    268e:	97 fd       	sbrc	r25, 7
    2690:	a0 95       	com	r26
    2692:	ba 2f       	mov	r27, r26
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	6c 89       	ldd	r22, Y+20	; 0x14
    26a2:	7d 89       	ldd	r23, Y+21	; 0x15
    26a4:	8e 89       	ldd	r24, Y+22	; 0x16
    26a6:	9f 89       	ldd	r25, Y+23	; 0x17
    26a8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	48 ec       	ldi	r20, 0xC8	; 200
    26ba:	52 ec       	ldi	r21, 0xC2	; 194
    26bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
    26d8:	2b c0       	rjmp	.+86     	; 0x2730 <main+0x59e>
     else{
    	   LCD_WRITE_Char('.');
    26da:	8e e2       	ldi	r24, 0x2E	; 46
    26dc:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
    	 Lcd_voidDisplayNumber((ans_float-ans)*-100.0);
    26e0:	89 8d       	ldd	r24, Y+25	; 0x19
    26e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26e4:	aa 27       	eor	r26, r26
    26e6:	97 fd       	sbrc	r25, 7
    26e8:	a0 95       	com	r26
    26ea:	ba 2f       	mov	r27, r26
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    26f4:	9b 01       	movw	r18, r22
    26f6:	ac 01       	movw	r20, r24
    26f8:	6c 89       	ldd	r22, Y+20	; 0x14
    26fa:	7d 89       	ldd	r23, Y+21	; 0x15
    26fc:	8e 89       	ldd	r24, Y+22	; 0x16
    26fe:	9f 89       	ldd	r25, Y+23	; 0x17
    2700:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	48 ec       	ldi	r20, 0xC8	; 200
    2712:	52 ec       	ldi	r21, 0xC2	; 194
    2714:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
     }
     flage =1 ;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	88 8f       	std	Y+24, r24	; 0x18
     num_1=0;
    2734:	18 a2       	std	Y+32, r1	; 0x20
    2736:	1f 8e       	std	Y+31, r1	; 0x1f
     num_2=0 ;
    2738:	1e 8e       	std	Y+30, r1	; 0x1e
    273a:	1d 8e       	std	Y+29, r1	; 0x1d
     deci=0;
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	af 83       	std	Y+7, r26	; 0x07
    274a:	b8 87       	std	Y+8, r27	; 0x08
     ans_float=0;}
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e0       	ldi	r26, 0x00	; 0
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	8c 8b       	std	Y+20, r24	; 0x14
    2756:	9d 8b       	std	Y+21, r25	; 0x15
    2758:	ae 8b       	std	Y+22, r26	; 0x16
    275a:	bf 8b       	std	Y+23, r27	; 0x17
    275c:	db c0       	rjmp	.+438    	; 0x2914 <main+0x782>
else if( minus ==1 && minus2==1  && minus_2==1){
    275e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	09 f0       	breq	.+2      	; 0x2766 <main+0x5d4>
    2764:	8c c0       	rjmp	.+280    	; 0x287e <main+0x6ec>
    2766:	8c 85       	ldd	r24, Y+12	; 0x0c
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	09 f0       	breq	.+2      	; 0x276e <main+0x5dc>
    276c:	88 c0       	rjmp	.+272    	; 0x287e <main+0x6ec>
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	09 f0       	breq	.+2      	; 0x2776 <main+0x5e4>
    2774:	84 c0       	rjmp	.+264    	; 0x287e <main+0x6ec>
	 Lcd_voidDisplayNumber(-ans);
    2776:	89 8d       	ldd	r24, Y+25	; 0x19
    2778:	9a 8d       	ldd	r25, Y+26	; 0x1a
    277a:	90 95       	com	r25
    277c:	81 95       	neg	r24
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	aa 27       	eor	r26, r26
    2782:	97 fd       	sbrc	r25, 7
    2784:	a0 95       	com	r26
    2786:	ba 2f       	mov	r27, r26
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
	   if(ans==0){
    2790:	89 8d       	ldd	r24, Y+25	; 0x19
    2792:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	81 f5       	brne	.+96     	; 0x27f8 <main+0x666>
	    LCD_WRITE_STRING("-0");
    2798:	88 e8       	ldi	r24, 0x88	; 136
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
	    LCD_WRITE_Char('.');
    27a0:	8e e2       	ldi	r24, 0x2E	; 46
    27a2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
	    Lcd_voidDisplayNumber((ans_float-ans)*100.0);}
    27a6:	89 8d       	ldd	r24, Y+25	; 0x19
    27a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27aa:	aa 27       	eor	r26, r26
    27ac:	97 fd       	sbrc	r25, 7
    27ae:	a0 95       	com	r26
    27b0:	ba 2f       	mov	r27, r26
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    27ba:	9b 01       	movw	r18, r22
    27bc:	ac 01       	movw	r20, r24
    27be:	6c 89       	ldd	r22, Y+20	; 0x14
    27c0:	7d 89       	ldd	r23, Y+21	; 0x15
    27c2:	8e 89       	ldd	r24, Y+22	; 0x16
    27c4:	9f 89       	ldd	r25, Y+23	; 0x17
    27c6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	48 ec       	ldi	r20, 0xC8	; 200
    27d8:	52 e4       	ldi	r21, 0x42	; 66
    27da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
    27f6:	2b c0       	rjmp	.+86     	; 0x284e <main+0x6bc>
	     else{
	    	   LCD_WRITE_Char('.');
    27f8:	8e e2       	ldi	r24, 0x2E	; 46
    27fa:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
	    	 Lcd_voidDisplayNumber((ans_float-ans)*100.0);
    27fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2800:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2802:	aa 27       	eor	r26, r26
    2804:	97 fd       	sbrc	r25, 7
    2806:	a0 95       	com	r26
    2808:	ba 2f       	mov	r27, r26
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2812:	9b 01       	movw	r18, r22
    2814:	ac 01       	movw	r20, r24
    2816:	6c 89       	ldd	r22, Y+20	; 0x14
    2818:	7d 89       	ldd	r23, Y+21	; 0x15
    281a:	8e 89       	ldd	r24, Y+22	; 0x16
    281c:	9f 89       	ldd	r25, Y+23	; 0x17
    281e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	48 ec       	ldi	r20, 0xC8	; 200
    2830:	52 e4       	ldi	r21, 0x42	; 66
    2832:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
	     }
	     flage =1 ;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	88 8f       	std	Y+24, r24	; 0x18
	     num_1=0;
    2852:	18 a2       	std	Y+32, r1	; 0x20
    2854:	1f 8e       	std	Y+31, r1	; 0x1f
	     num_2=0 ;
    2856:	1e 8e       	std	Y+30, r1	; 0x1e
    2858:	1d 8e       	std	Y+29, r1	; 0x1d
	     deci=0;
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	9e 83       	std	Y+6, r25	; 0x06
    2866:	af 83       	std	Y+7, r26	; 0x07
    2868:	b8 87       	std	Y+8, r27	; 0x08
	     ans_float=0;
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e0       	ldi	r26, 0x00	; 0
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	8c 8b       	std	Y+20, r24	; 0x14
    2874:	9d 8b       	std	Y+21, r25	; 0x15
    2876:	ae 8b       	std	Y+22, r26	; 0x16
    2878:	bf 8b       	std	Y+23, r27	; 0x17
	     minus_2=0;
    287a:	19 86       	std	Y+9, r1	; 0x09
    287c:	4b c0       	rjmp	.+150    	; 0x2914 <main+0x782>
}
else{
	Lcd_voidDisplayNumber(ans);
    287e:	89 8d       	ldd	r24, Y+25	; 0x19
    2880:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2882:	aa 27       	eor	r26, r26
    2884:	97 fd       	sbrc	r25, 7
    2886:	a0 95       	com	r26
    2888:	ba 2f       	mov	r27, r26
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
 LCD_WRITE_Char('.');
    2892:	8e e2       	ldi	r24, 0x2E	; 46
    2894:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
 Lcd_voidDisplayNumber((ans_float-ans)*100.0);
    2898:	89 8d       	ldd	r24, Y+25	; 0x19
    289a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    289c:	aa 27       	eor	r26, r26
    289e:	97 fd       	sbrc	r25, 7
    28a0:	a0 95       	com	r26
    28a2:	ba 2f       	mov	r27, r26
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    28ac:	9b 01       	movw	r18, r22
    28ae:	ac 01       	movw	r20, r24
    28b0:	6c 89       	ldd	r22, Y+20	; 0x14
    28b2:	7d 89       	ldd	r23, Y+21	; 0x15
    28b4:	8e 89       	ldd	r24, Y+22	; 0x16
    28b6:	9f 89       	ldd	r25, Y+23	; 0x17
    28b8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	48 ec       	ldi	r20, 0xC8	; 200
    28ca:	52 e4       	ldi	r21, 0x42	; 66
    28cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
 flage =1 ;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	88 8f       	std	Y+24, r24	; 0x18
 num_1=0;
    28ec:	18 a2       	std	Y+32, r1	; 0x20
    28ee:	1f 8e       	std	Y+31, r1	; 0x1f
 num_2=0 ;
    28f0:	1e 8e       	std	Y+30, r1	; 0x1e
    28f2:	1d 8e       	std	Y+29, r1	; 0x1d
 deci=0;
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e0       	ldi	r26, 0x00	; 0
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	8d 83       	std	Y+5, r24	; 0x05
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	af 83       	std	Y+7, r26	; 0x07
    2902:	b8 87       	std	Y+8, r27	; 0x08
 ans_float=0;}
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	8c 8b       	std	Y+20, r24	; 0x14
    290e:	9d 8b       	std	Y+21, r25	; 0x15
    2910:	ae 8b       	std	Y+22, r26	; 0x16
    2912:	bf 8b       	std	Y+23, r27	; 0x17
 	}

   }

  do{
    KPD_u8KpdGetKeyState(&pinvalue);
    2914:	ce 01       	movw	r24, r28
    2916:	82 96       	adiw	r24, 0x22	; 34
    2918:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
    sign = pinvalue;
    291c:	8a a1       	ldd	r24, Y+34	; 0x22
    291e:	89 a3       	std	Y+33, r24	; 0x21
  	}while(pinvalue == Kpd_keynotpressed);
    2920:	8a a1       	ldd	r24, Y+34	; 0x22
    2922:	8f 3f       	cpi	r24, 0xFF	; 255
    2924:	b9 f3       	breq	.-18     	; 0x2914 <main+0x782>
    2926:	e5 c0       	rjmp	.+458    	; 0x2af2 <main+0x960>
 break ;

 case 's':

  if(flage ==0 ){
    2928:	88 8d       	ldd	r24, Y+24	; 0x18
    292a:	88 23       	and	r24, r24
    292c:	09 f0       	breq	.+2      	; 0x2930 <main+0x79e>
    292e:	b0 c0       	rjmp	.+352    	; 0x2a90 <main+0x8fe>
  ans_float=calculate_root((f64)num_2);
    2930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2934:	aa 27       	eor	r26, r26
    2936:	97 fd       	sbrc	r25, 7
    2938:	a0 95       	com	r26
    293a:	ba 2f       	mov	r27, r26
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <calculate_root>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8c 8b       	std	Y+20, r24	; 0x14
    2956:	9d 8b       	std	Y+21, r25	; 0x15
    2958:	ae 8b       	std	Y+22, r26	; 0x16
    295a:	bf 8b       	std	Y+23, r27	; 0x17
  ans=(s32) calculate_root((f64)num_2 );
    295c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2960:	aa 27       	eor	r26, r26
    2962:	97 fd       	sbrc	r25, 7
    2964:	a0 95       	com	r26
    2966:	ba 2f       	mov	r27, r26
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 48 17 	call	0x2e90	; 0x2e90 <calculate_root>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9a 8f       	std	Y+26, r25	; 0x1a
    298e:	89 8f       	std	Y+25, r24	; 0x19
  f64 deci = ans_float-ans;
    2990:	89 8d       	ldd	r24, Y+25	; 0x19
    2992:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2994:	aa 27       	eor	r26, r26
    2996:	97 fd       	sbrc	r25, 7
    2998:	a0 95       	com	r26
    299a:	ba 2f       	mov	r27, r26
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    29a4:	9b 01       	movw	r18, r22
    29a6:	ac 01       	movw	r20, r24
    29a8:	6c 89       	ldd	r22, Y+20	; 0x14
    29aa:	7d 89       	ldd	r23, Y+21	; 0x15
    29ac:	8e 89       	ldd	r24, Y+22	; 0x16
    29ae:	9f 89       	ldd	r25, Y+23	; 0x17
    29b0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	ab 83       	std	Y+3, r26	; 0x03
    29be:	bc 83       	std	Y+4, r27	; 0x04
 if(num_2<0 ){
    29c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c4:	99 23       	and	r25, r25
    29c6:	84 f4       	brge	.+32     	; 0x29e8 <main+0x856>
 LCD_WRITE_COMMAND(lcd_Clear);
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
 LCD_WRITE_STRING("Error:negative ");
    29ce:	8b e8       	ldi	r24, 0x8B	; 139
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>

 LCD_GO_TO(line2,0);
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_GO_TO>
  LCD_WRITE_STRING("square is undefined");
    29de:	8b e9       	ldi	r24, 0x9B	; 155
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
    29e6:	54 c0       	rjmp	.+168    	; 0x2a90 <main+0x8fe>
	 			}
 else if(deci ==0  ){
    29e8:	69 81       	ldd	r22, Y+1	; 0x01
    29ea:	7a 81       	ldd	r23, Y+2	; 0x02
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	79 f4       	brne	.+30     	; 0x2a1e <main+0x88c>
    Lcd_voidDisplayNumber(ans);
    2a00:	89 8d       	ldd	r24, Y+25	; 0x19
    2a02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a04:	aa 27       	eor	r26, r26
    2a06:	97 fd       	sbrc	r25, 7
    2a08:	a0 95       	com	r26
    2a0a:	ba 2f       	mov	r27, r26
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
    flage =1 ;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	88 8f       	std	Y+24, r24	; 0x18
    num_1=0;}
    2a18:	18 a2       	std	Y+32, r1	; 0x20
    2a1a:	1f 8e       	std	Y+31, r1	; 0x1f
    2a1c:	39 c0       	rjmp	.+114    	; 0x2a90 <main+0x8fe>
 else{

 	Lcd_voidDisplayNumber(ans);
    2a1e:	89 8d       	ldd	r24, Y+25	; 0x19
    2a20:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a22:	aa 27       	eor	r26, r26
    2a24:	97 fd       	sbrc	r25, 7
    2a26:	a0 95       	com	r26
    2a28:	ba 2f       	mov	r27, r26
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
     LCD_WRITE_Char('.');
    2a32:	8e e2       	ldi	r24, 0x2E	; 46
    2a34:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
     Lcd_voidDisplayNumber((ans_float-ans)*100.0);
    2a38:	89 8d       	ldd	r24, Y+25	; 0x19
    2a3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a3c:	aa 27       	eor	r26, r26
    2a3e:	97 fd       	sbrc	r25, 7
    2a40:	a0 95       	com	r26
    2a42:	ba 2f       	mov	r27, r26
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2a4c:	9b 01       	movw	r18, r22
    2a4e:	ac 01       	movw	r20, r24
    2a50:	6c 89       	ldd	r22, Y+20	; 0x14
    2a52:	7d 89       	ldd	r23, Y+21	; 0x15
    2a54:	8e 89       	ldd	r24, Y+22	; 0x16
    2a56:	9f 89       	ldd	r25, Y+23	; 0x17
    2a58:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	48 ec       	ldi	r20, 0xC8	; 200
    2a6a:	52 e4       	ldi	r21, 0x42	; 66
    2a6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
     flage =1 ;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	88 8f       	std	Y+24, r24	; 0x18
     num_1=0;
    2a8c:	18 a2       	std	Y+32, r1	; 0x20
    2a8e:	1f 8e       	std	Y+31, r1	; 0x1f
 	}

   }

  do{
    KPD_u8KpdGetKeyState(&pinvalue);
    2a90:	ce 01       	movw	r24, r28
    2a92:	82 96       	adiw	r24, 0x22	; 34
    2a94:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
    sign = pinvalue;
    2a98:	8a a1       	ldd	r24, Y+34	; 0x22
    2a9a:	89 a3       	std	Y+33, r24	; 0x21
  	}while(pinvalue == Kpd_keynotpressed);
    2a9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa0:	b9 f3       	breq	.-18     	; 0x2a90 <main+0x8fe>
    2aa2:	27 c0       	rjmp	.+78     	; 0x2af2 <main+0x960>
 break ;


 case '%':
	  if(flage ==0 ){
    2aa4:	88 8d       	ldd	r24, Y+24	; 0x18
    2aa6:	88 23       	and	r24, r24
    2aa8:	d9 f4       	brne	.+54     	; 0x2ae0 <main+0x94e>
	 ans= modules(num_1 ,num_2);
    2aaa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aac:	98 a1       	ldd	r25, Y+32	; 0x20
    2aae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ab0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <modules>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9a 8f       	std	Y+26, r25	; 0x1a
    2abe:	89 8f       	std	Y+25, r24	; 0x19
	 Lcd_voidDisplayNumber(ans);
    2ac0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ac2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ac4:	aa 27       	eor	r26, r26
    2ac6:	97 fd       	sbrc	r25, 7
    2ac8:	a0 95       	com	r26
    2aca:	ba 2f       	mov	r27, r26
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
	 flage =1 ;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	88 8f       	std	Y+24, r24	; 0x18
	 num_1=0;
    2ad8:	18 a2       	std	Y+32, r1	; 0x20
    2ada:	1f 8e       	std	Y+31, r1	; 0x1f
	 num_2=0 ;
    2adc:	1e 8e       	std	Y+30, r1	; 0x1e
    2ade:	1d 8e       	std	Y+29, r1	; 0x1d
  }
  do{
	  KPD_u8KpdGetKeyState(&pinvalue);
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	82 96       	adiw	r24, 0x22	; 34
    2ae4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
	  sign = pinvalue;
    2ae8:	8a a1       	ldd	r24, Y+34	; 0x22
    2aea:	89 a3       	std	Y+33, r24	; 0x21
	 }while(pinvalue == Kpd_keynotpressed);
    2aec:	8a a1       	ldd	r24, Y+34	; 0x22
    2aee:	8f 3f       	cpi	r24, 0xFF	; 255
    2af0:	b9 f3       	breq	.-18     	; 0x2ae0 <main+0x94e>





if(sign == 'c'){
    2af2:	89 a1       	ldd	r24, Y+33	; 0x21
    2af4:	83 36       	cpi	r24, 0x63	; 99
    2af6:	81 f4       	brne	.+32     	; 0x2b18 <main+0x986>
  LCD_WRITE_COMMAND(lcd_Clear);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
  ans=0 ;
    2afe:	1a 8e       	std	Y+26, r1	; 0x1a
    2b00:	19 8e       	std	Y+25, r1	; 0x19
  num_1=0 ;
    2b02:	18 a2       	std	Y+32, r1	; 0x20
    2b04:	1f 8e       	std	Y+31, r1	; 0x1f
  num_2=0 ;
    2b06:	1e 8e       	std	Y+30, r1	; 0x1e
    2b08:	1d 8e       	std	Y+29, r1	; 0x1d
  flage =0 ;
    2b0a:	18 8e       	std	Y+24, r1	; 0x18
 flage2 =0;
    2b0c:	1f 86       	std	Y+15, r1	; 0x0f
	clear =0 ;
    2b0e:	1e 86       	std	Y+14, r1	; 0x0e
	minus =0;
    2b10:	1d 86       	std	Y+13, r1	; 0x0d
	minus2=0;
    2b12:	1c 86       	std	Y+12, r1	; 0x0c
	f1 =0;
    2b14:	1b 86       	std	Y+11, r1	; 0x0b
    2b16:	d8 c0       	rjmp	.+432    	; 0x2cc8 <main+0xb36>
  }

 else{
 switch (sign){
    2b18:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	3c a3       	std	Y+36, r19	; 0x24
    2b20:	2b a3       	std	Y+35, r18	; 0x23
    2b22:	4b a1       	ldd	r20, Y+35	; 0x23
    2b24:	5c a1       	ldd	r21, Y+36	; 0x24
    2b26:	44 36       	cpi	r20, 0x64	; 100
    2b28:	51 05       	cpc	r21, r1
    2b2a:	69 f0       	breq	.+26     	; 0x2b46 <main+0x9b4>
    2b2c:	8b a1       	ldd	r24, Y+35	; 0x23
    2b2e:	9c a1       	ldd	r25, Y+36	; 0x24
    2b30:	89 36       	cpi	r24, 0x69	; 105
    2b32:	91 05       	cpc	r25, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <main+0x9a6>
    2b36:	5e c0       	rjmp	.+188    	; 0x2bf4 <main+0xa62>
    2b38:	2b a1       	ldd	r18, Y+35	; 0x23
    2b3a:	3c a1       	ldd	r19, Y+36	; 0x24
    2b3c:	21 36       	cpi	r18, 0x61	; 97
    2b3e:	31 05       	cpc	r19, r1
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <main+0x9b2>
    2b42:	ad c0       	rjmp	.+346    	; 0x2c9e <main+0xb0c>
    2b44:	c1 c0       	rjmp	.+386    	; 0x2cc8 <main+0xb36>
	  case 'd':
	    flage2 =0;
    2b46:	1f 86       	std	Y+15, r1	; 0x0f
	    clear =0 ;
    2b48:	1e 86       	std	Y+14, r1	; 0x0e
	    minus =0;
    2b4a:	1d 86       	std	Y+13, r1	; 0x0d
	    minus2=0;
    2b4c:	1c 86       	std	Y+12, r1	; 0x0c
	    f1 =0;
    2b4e:	1b 86       	std	Y+11, r1	; 0x0b
	    LCD_WRITE_COMMAND(lcd_Clear);
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
	       num_2=0 ;
    2b56:	1e 8e       	std	Y+30, r1	; 0x1e
    2b58:	1d 8e       	std	Y+29, r1	; 0x1d
	        LCD_WRITE_STRING("ANS -");
    2b5a:	8f ea       	ldi	r24, 0xAF	; 175
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
	        while(1){
	       do{
	  		KPD_u8KpdGetKeyState(&pinvalue);
    2b62:	ce 01       	movw	r24, r28
    2b64:	82 96       	adiw	r24, 0x22	; 34
    2b66:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
	  	   }while(pinvalue == Kpd_keynotpressed);
    2b6a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b6c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b6e:	c9 f3       	breq	.-14     	; 0x2b62 <main+0x9d0>
	  	   sign_1 = pinvalue -'0';
    2b70:	8a a1       	ldd	r24, Y+34	; 0x22
    2b72:	80 53       	subi	r24, 0x30	; 48
    2b74:	8c 8f       	std	Y+28, r24	; 0x1c
	  	   if(sign_1 >=0 && sign_1<=9  ){
    2b76:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b78:	8a 30       	cpi	r24, 0x0A	; 10
    2b7a:	c0 f4       	brcc	.+48     	; 0x2bac <main+0xa1a>
	  			LCD_WRITE_Char(pinvalue);
    2b7c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b7e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
		  		num_2 = (num_2*10) + (pinvalue -'0');
    2b82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b86:	9c 01       	movw	r18, r24
    2b88:	22 0f       	add	r18, r18
    2b8a:	33 1f       	adc	r19, r19
    2b8c:	c9 01       	movw	r24, r18
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	28 0f       	add	r18, r24
    2b98:	39 1f       	adc	r19, r25
    2b9a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b9c:	88 2f       	mov	r24, r24
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	c0 97       	sbiw	r24, 0x30	; 48
    2ba2:	82 0f       	add	r24, r18
    2ba4:	93 1f       	adc	r25, r19
    2ba6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ba8:	8d 8f       	std	Y+29, r24	; 0x1d
    2baa:	db cf       	rjmp	.-74     	; 0x2b62 <main+0x9d0>

		    }
		  	else  if( pinvalue == '=') {
    2bac:	8a a1       	ldd	r24, Y+34	; 0x22
    2bae:	8d 33       	cpi	r24, 0x3D	; 61
    2bb0:	c1 f6       	brne	.-80     	; 0x2b62 <main+0x9d0>
		  		LCD_WRITE_Char('=');
    2bb2:	8d e3       	ldi	r24, 0x3D	; 61
    2bb4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
		  		 ans=ans - num_2;
    2bb8:	29 8d       	ldd	r18, Y+25	; 0x19
    2bba:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2bbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc0:	a9 01       	movw	r20, r18
    2bc2:	48 1b       	sub	r20, r24
    2bc4:	59 0b       	sbc	r21, r25
    2bc6:	ca 01       	movw	r24, r20
    2bc8:	9a 8f       	std	Y+26, r25	; 0x1a
    2bca:	89 8f       	std	Y+25, r24	; 0x19

		  		break ;}
		  } Lcd_voidDisplayNumber(ans);
    2bcc:	89 8d       	ldd	r24, Y+25	; 0x19
    2bce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bd0:	aa 27       	eor	r26, r26
    2bd2:	97 fd       	sbrc	r25, 7
    2bd4:	a0 95       	com	r26
    2bd6:	ba 2f       	mov	r27, r26
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
		  do{
		 	 KPD_u8KpdGetKeyState(&pinvalue);
    2be0:	ce 01       	movw	r24, r28
    2be2:	82 96       	adiw	r24, 0x22	; 34
    2be4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
		 	 sign = pinvalue;
    2be8:	8a a1       	ldd	r24, Y+34	; 0x22
    2bea:	89 a3       	std	Y+33, r24	; 0x21
		 		 			}while(pinvalue == Kpd_keynotpressed);
    2bec:	8a a1       	ldd	r24, Y+34	; 0x22
    2bee:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf0:	b9 f3       	breq	.-18     	; 0x2be0 <main+0xa4e>
    2bf2:	6a c0       	rjmp	.+212    	; 0x2cc8 <main+0xb36>
	 break ;

		 case 'i':
			  flage2 =0;
    2bf4:	1f 86       	std	Y+15, r1	; 0x0f
			   		clear =0 ;
    2bf6:	1e 86       	std	Y+14, r1	; 0x0e
			   		minus =0;
    2bf8:	1d 86       	std	Y+13, r1	; 0x0d
			   		minus2=0;
    2bfa:	1c 86       	std	Y+12, r1	; 0x0c
			   		f1 =0;
    2bfc:	1b 86       	std	Y+11, r1	; 0x0b
			  LCD_WRITE_COMMAND(lcd_Clear);
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
			  num_2=0 ;
    2c04:	1e 8e       	std	Y+30, r1	; 0x1e
    2c06:	1d 8e       	std	Y+29, r1	; 0x1d
			  LCD_WRITE_STRING("ANS +");
    2c08:	85 eb       	ldi	r24, 0xB5	; 181
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_WRITE_STRING>
			  while(1){
			   do{
			  		KPD_u8KpdGetKeyState(&pinvalue);
    2c10:	ce 01       	movw	r24, r28
    2c12:	82 96       	adiw	r24, 0x22	; 34
    2c14:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
			  	}while(pinvalue == Kpd_keynotpressed);
    2c18:	8a a1       	ldd	r24, Y+34	; 0x22
    2c1a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c1c:	c9 f3       	breq	.-14     	; 0x2c10 <main+0xa7e>
				  sign_1 = pinvalue -'0';
    2c1e:	8a a1       	ldd	r24, Y+34	; 0x22
    2c20:	80 53       	subi	r24, 0x30	; 48
    2c22:	8c 8f       	std	Y+28, r24	; 0x1c
				  if(sign_1 >=0 && sign_1<=9  ){
    2c24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c26:	8a 30       	cpi	r24, 0x0A	; 10
    2c28:	c0 f4       	brcc	.+48     	; 0x2c5a <main+0xac8>
				  LCD_WRITE_Char(pinvalue);
    2c2a:	8a a1       	ldd	r24, Y+34	; 0x22
    2c2c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
				  num_2 = (num_2*10) + (pinvalue -'0');
    2c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c34:	9c 01       	movw	r18, r24
    2c36:	22 0f       	add	r18, r18
    2c38:	33 1f       	adc	r19, r19
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	28 0f       	add	r18, r24
    2c46:	39 1f       	adc	r19, r25
    2c48:	8a a1       	ldd	r24, Y+34	; 0x22
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	c0 97       	sbiw	r24, 0x30	; 48
    2c50:	82 0f       	add	r24, r18
    2c52:	93 1f       	adc	r25, r19
    2c54:	9e 8f       	std	Y+30, r25	; 0x1e
    2c56:	8d 8f       	std	Y+29, r24	; 0x1d
    2c58:	db cf       	rjmp	.-74     	; 0x2c10 <main+0xa7e>

				    }
				  else  if( pinvalue=='=') {
    2c5a:	8a a1       	ldd	r24, Y+34	; 0x22
    2c5c:	8d 33       	cpi	r24, 0x3D	; 61
    2c5e:	c1 f6       	brne	.-80     	; 0x2c10 <main+0xa7e>
				    LCD_WRITE_Char('=');
    2c60:	8d e3       	ldi	r24, 0x3D	; 61
    2c62:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <LCD_WRITE_Char>
				     ans= ans+num_2;
    2c66:	29 8d       	ldd	r18, Y+25	; 0x19
    2c68:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c6e:	82 0f       	add	r24, r18
    2c70:	93 1f       	adc	r25, r19
    2c72:	9a 8f       	std	Y+26, r25	; 0x1a
    2c74:	89 8f       	std	Y+25, r24	; 0x19

				  		break ;}
				  }
				  Lcd_voidDisplayNumber(ans);
    2c76:	89 8d       	ldd	r24, Y+25	; 0x19
    2c78:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c7a:	aa 27       	eor	r26, r26
    2c7c:	97 fd       	sbrc	r25, 7
    2c7e:	a0 95       	com	r26
    2c80:	ba 2f       	mov	r27, r26
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Lcd_voidDisplayNumber>
				  do{
				 	    KPD_u8KpdGetKeyState(&pinvalue);
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	82 96       	adiw	r24, 0x22	; 34
    2c8e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <KPD_u8KpdGetKeyState>
				 	    sign = pinvalue;
    2c92:	8a a1       	ldd	r24, Y+34	; 0x22
    2c94:	89 a3       	std	Y+33, r24	; 0x21
				 		 }while(pinvalue == Kpd_keynotpressed);
    2c96:	8a a1       	ldd	r24, Y+34	; 0x22
    2c98:	8f 3f       	cpi	r24, 0xFF	; 255
    2c9a:	b9 f3       	breq	.-18     	; 0x2c8a <main+0xaf8>
    2c9c:	15 c0       	rjmp	.+42     	; 0x2cc8 <main+0xb36>
			 break ;

		 case 'a':
			 contin_ans=1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	8a 87       	std	Y+10, r24	; 0x0a
			 LCD_WRITE_COMMAND(lcd_Clear);
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
			  num_2=0 ;
    2ca8:	1e 8e       	std	Y+30, r1	; 0x1e
    2caa:	1d 8e       	std	Y+29, r1	; 0x1d
			  num_1=0 ;
    2cac:	18 a2       	std	Y+32, r1	; 0x20
    2cae:	1f 8e       	std	Y+31, r1	; 0x1f
			  flage =0 ;
    2cb0:	18 8e       	std	Y+24, r1	; 0x18
			  flage2 =0;
    2cb2:	1f 86       	std	Y+15, r1	; 0x0f
			 clear =0 ;
    2cb4:	1e 86       	std	Y+14, r1	; 0x0e
			minus =0;
    2cb6:	1d 86       	std	Y+13, r1	; 0x0d
			minus2=0;
    2cb8:	1c 86       	std	Y+12, r1	; 0x0c
			f1 =0;
    2cba:	1b 86       	std	Y+11, r1	; 0x0b
			 num_1=ans ;
    2cbc:	89 8d       	ldd	r24, Y+25	; 0x19
    2cbe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cc0:	98 a3       	std	Y+32, r25	; 0x20
    2cc2:	8f 8f       	std	Y+31, r24	; 0x1f
			 sign =pinvalue;
    2cc4:	8a a1       	ldd	r24, Y+34	; 0x22
    2cc6:	89 a3       	std	Y+33, r24	; 0x21
		 }

	 }


     if(sign == 'c'){
    2cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cca:	83 36       	cpi	r24, 0x63	; 99
    2ccc:	09 f0       	breq	.+2      	; 0x2cd0 <main+0xb3e>
    2cce:	7b ca       	rjmp	.-2826   	; 0x21c6 <main+0x34>

   		 LCD_WRITE_COMMAND(lcd_Clear);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_WRITE_COMMAND>
   		 ans=0 ;
    2cd6:	1a 8e       	std	Y+26, r1	; 0x1a
    2cd8:	19 8e       	std	Y+25, r1	; 0x19
   		 num_1=0 ;
    2cda:	18 a2       	std	Y+32, r1	; 0x20
    2cdc:	1f 8e       	std	Y+31, r1	; 0x1f
   		 num_2=0 ;
    2cde:	1e 8e       	std	Y+30, r1	; 0x1e
    2ce0:	1d 8e       	std	Y+29, r1	; 0x1d
   		 flage =0 ;
    2ce2:	18 8e       	std	Y+24, r1	; 0x18
         flage2 =0;
    2ce4:	1f 86       	std	Y+15, r1	; 0x0f
   		clear =0 ;
    2ce6:	1e 86       	std	Y+14, r1	; 0x0e
   		minus =0;
    2ce8:	1d 86       	std	Y+13, r1	; 0x0d
   		minus2=0;
    2cea:	1c 86       	std	Y+12, r1	; 0x0c
   		f1 =0;
    2cec:	1b 86       	std	Y+11, r1	; 0x0b
    2cee:	6b ca       	rjmp	.-2858   	; 0x21c6 <main+0x34>

00002cf0 <sum>:
}

 }


s32 sum(s16 num1 , s16 num2){
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	28 97       	sbiw	r28, 0x08	; 8
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	9e 83       	std	Y+6, r25	; 0x06
    2d06:	8d 83       	std	Y+5, r24	; 0x05
    2d08:	78 87       	std	Y+8, r23	; 0x08
    2d0a:	6f 83       	std	Y+7, r22	; 0x07

	s32 sumation = num1 + num2 ;
    2d0c:	2d 81       	ldd	r18, Y+5	; 0x05
    2d0e:	3e 81       	ldd	r19, Y+6	; 0x06
    2d10:	8f 81       	ldd	r24, Y+7	; 0x07
    2d12:	98 85       	ldd	r25, Y+8	; 0x08
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	aa 27       	eor	r26, r26
    2d1a:	97 fd       	sbrc	r25, 7
    2d1c:	a0 95       	com	r26
    2d1e:	ba 2f       	mov	r27, r26
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	ab 83       	std	Y+3, r26	; 0x03
    2d26:	bc 83       	std	Y+4, r27	; 0x04
	return sumation ;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d2e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	28 96       	adiw	r28, 0x08	; 8
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <sub>:

s32 sub(s16 num1 , s16 num2){
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	28 97       	sbiw	r28, 0x08	; 8
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	78 87       	std	Y+8, r23	; 0x08
    2d60:	6f 83       	std	Y+7, r22	; 0x07

	s32 subtraction = num1 - num2 ;
    2d62:	2d 81       	ldd	r18, Y+5	; 0x05
    2d64:	3e 81       	ldd	r19, Y+6	; 0x06
    2d66:	8f 81       	ldd	r24, Y+7	; 0x07
    2d68:	98 85       	ldd	r25, Y+8	; 0x08
    2d6a:	a9 01       	movw	r20, r18
    2d6c:	48 1b       	sub	r20, r24
    2d6e:	59 0b       	sbc	r21, r25
    2d70:	ca 01       	movw	r24, r20
    2d72:	aa 27       	eor	r26, r26
    2d74:	97 fd       	sbrc	r25, 7
    2d76:	a0 95       	com	r26
    2d78:	ba 2f       	mov	r27, r26
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	ab 83       	std	Y+3, r26	; 0x03
    2d80:	bc 83       	std	Y+4, r27	; 0x04
	return subtraction ;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	ab 81       	ldd	r26, Y+3	; 0x03
    2d88:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	28 96       	adiw	r28, 0x08	; 8
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <multip>:

s32 multip(s16 num1 , s16 num2){
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	28 97       	sbiw	r28, 0x08	; 8
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	78 87       	std	Y+8, r23	; 0x08
    2dba:	6f 83       	std	Y+7, r22	; 0x07

	s32 multiplay = num1 * num2 ;
    2dbc:	2d 81       	ldd	r18, Y+5	; 0x05
    2dbe:	3e 81       	ldd	r19, Y+6	; 0x06
    2dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc2:	98 85       	ldd	r25, Y+8	; 0x08
    2dc4:	ac 01       	movw	r20, r24
    2dc6:	24 9f       	mul	r18, r20
    2dc8:	c0 01       	movw	r24, r0
    2dca:	25 9f       	mul	r18, r21
    2dcc:	90 0d       	add	r25, r0
    2dce:	34 9f       	mul	r19, r20
    2dd0:	90 0d       	add	r25, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	aa 27       	eor	r26, r26
    2dd6:	97 fd       	sbrc	r25, 7
    2dd8:	a0 95       	com	r26
    2dda:	ba 2f       	mov	r27, r26
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	ab 83       	std	Y+3, r26	; 0x03
    2de2:	bc 83       	std	Y+4, r27	; 0x04
	return multiplay ;
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	ab 81       	ldd	r26, Y+3	; 0x03
    2dea:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	28 96       	adiw	r28, 0x08	; 8
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <div>:

f64 div(s16 num1 , s16 num2){
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	28 97       	sbiw	r28, 0x08	; 8
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	9e 83       	std	Y+6, r25	; 0x06
    2e20:	8d 83       	std	Y+5, r24	; 0x05
    2e22:	78 87       	std	Y+8, r23	; 0x08
    2e24:	6f 83       	std	Y+7, r22	; 0x07

	f64 division = (f64)num1 / num2 ;
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2a:	aa 27       	eor	r26, r26
    2e2c:	97 fd       	sbrc	r25, 7
    2e2e:	a0 95       	com	r26
    2e30:	ba 2f       	mov	r27, r26
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2e3a:	7b 01       	movw	r14, r22
    2e3c:	8c 01       	movw	r16, r24
    2e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e40:	98 85       	ldd	r25, Y+8	; 0x08
    2e42:	aa 27       	eor	r26, r26
    2e44:	97 fd       	sbrc	r25, 7
    2e46:	a0 95       	com	r26
    2e48:	ba 2f       	mov	r27, r26
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2e52:	9b 01       	movw	r18, r22
    2e54:	ac 01       	movw	r20, r24
    2e56:	c8 01       	movw	r24, r16
    2e58:	b7 01       	movw	r22, r14
    2e5a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	ab 83       	std	Y+3, r26	; 0x03
    2e68:	bc 83       	std	Y+4, r27	; 0x04

	return division ;
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e70:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	28 96       	adiw	r28, 0x08	; 8
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	ff 90       	pop	r15
    2e8c:	ef 90       	pop	r14
    2e8e:	08 95       	ret

00002e90 <calculate_root>:

double calculate_root(double number) {
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	2a 97       	sbiw	r28, 0x0a	; 10
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	6f 83       	std	Y+7, r22	; 0x07
    2ea6:	78 87       	std	Y+8, r23	; 0x08
    2ea8:	89 87       	std	Y+9, r24	; 0x09
    2eaa:	9a 87       	std	Y+10, r25	; 0x0a
 float x ;
 int i ;
 x =number ;
    2eac:	8f 81       	ldd	r24, Y+7	; 0x07
    2eae:	98 85       	ldd	r25, Y+8	; 0x08
    2eb0:	a9 85       	ldd	r26, Y+9	; 0x09
    2eb2:	ba 85       	ldd	r27, Y+10	; 0x0a
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
    2eb6:	9c 83       	std	Y+4, r25	; 0x04
    2eb8:	ad 83       	std	Y+5, r26	; 0x05
    2eba:	be 83       	std	Y+6, r27	; 0x06
 for (i = 0; i < 10; ++i) {
    2ebc:	1a 82       	std	Y+2, r1	; 0x02
    2ebe:	19 82       	std	Y+1, r1	; 0x01
    2ec0:	29 c0       	rjmp	.+82     	; 0x2f14 <calculate_root+0x84>
	x=(x+(number/x))/2;
    2ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec4:	78 85       	ldd	r23, Y+8	; 0x08
    2ec6:	89 85       	ldd	r24, Y+9	; 0x09
    2ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eca:	2b 81       	ldd	r18, Y+3	; 0x03
    2ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ece:	4d 81       	ldd	r20, Y+5	; 0x05
    2ed0:	5e 81       	ldd	r21, Y+6	; 0x06
    2ed2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee2:	4d 81       	ldd	r20, Y+5	; 0x05
    2ee4:	5e 81       	ldd	r21, Y+6	; 0x06
    2ee6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	50 e4       	ldi	r21, 0x40	; 64
    2efa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8b 83       	std	Y+3, r24	; 0x03
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	ad 83       	std	Y+5, r26	; 0x05
    2f08:	be 83       	std	Y+6, r27	; 0x06

double calculate_root(double number) {
 float x ;
 int i ;
 x =number ;
 for (i = 0; i < 10; ++i) {
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	9a 83       	std	Y+2, r25	; 0x02
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	8a 30       	cpi	r24, 0x0A	; 10
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	94 f2       	brlt	.-92     	; 0x2ec2 <calculate_root+0x32>
	x=(x+(number/x))/2;
}

return x;
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	ad 81       	ldd	r26, Y+5	; 0x05
    2f24:	be 81       	ldd	r27, Y+6	; 0x06
}
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	2a 96       	adiw	r28, 0x0a	; 10
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <modules>:
s32 modules (s16 num1 , s16 num2){
    2f3c:	ef 92       	push	r14
    2f3e:	ff 92       	push	r15
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	2c 97       	sbiw	r28, 0x0c	; 12
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	9a 87       	std	Y+10, r25	; 0x0a
    2f5a:	89 87       	std	Y+9, r24	; 0x09
    2f5c:	7c 87       	std	Y+12, r23	; 0x0c
    2f5e:	6b 87       	std	Y+11, r22	; 0x0b
	s32 module ;
	s32 div ;
	if(num2>num1){
    2f60:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f62:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	82 17       	cp	r24, r18
    2f6a:	93 07       	cpc	r25, r19
    2f6c:	5c f4       	brge	.+22     	; 0x2f84 <modules+0x48>
		module = num1;
    2f6e:	89 85       	ldd	r24, Y+9	; 0x09
    2f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f72:	aa 27       	eor	r26, r26
    2f74:	97 fd       	sbrc	r25, 7
    2f76:	a0 95       	com	r26
    2f78:	ba 2f       	mov	r27, r26
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	af 83       	std	Y+7, r26	; 0x07
    2f80:	b8 87       	std	Y+8, r27	; 0x08
    2f82:	33 c0       	rjmp	.+102    	; 0x2fea <modules+0xae>
	}
	else{
		div=(s32)(num1/num2);
    2f84:	89 85       	ldd	r24, Y+9	; 0x09
    2f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f88:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f8a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f8c:	b9 01       	movw	r22, r18
    2f8e:	0e 94 27 18 	call	0x304e	; 0x304e <__divmodhi4>
    2f92:	cb 01       	movw	r24, r22
    2f94:	aa 27       	eor	r26, r26
    2f96:	97 fd       	sbrc	r25, 7
    2f98:	a0 95       	com	r26
    2f9a:	ba 2f       	mov	r27, r26
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	ab 83       	std	Y+3, r26	; 0x03
    2fa2:	bc 83       	std	Y+4, r27	; 0x04
       module = num1 - div*num2;
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	7c 01       	movw	r14, r24
    2faa:	00 27       	eor	r16, r16
    2fac:	f7 fc       	sbrc	r15, 7
    2fae:	00 95       	com	r16
    2fb0:	10 2f       	mov	r17, r16
    2fb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fb6:	aa 27       	eor	r26, r26
    2fb8:	97 fd       	sbrc	r25, 7
    2fba:	a0 95       	com	r26
    2fbc:	ba 2f       	mov	r27, r26
    2fbe:	29 81       	ldd	r18, Y+1	; 0x01
    2fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    2fc2:	4b 81       	ldd	r20, Y+3	; 0x03
    2fc4:	5c 81       	ldd	r21, Y+4	; 0x04
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 08 18 	call	0x3010	; 0x3010 <__mulsi3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	a8 01       	movw	r20, r16
    2fd4:	97 01       	movw	r18, r14
    2fd6:	28 1b       	sub	r18, r24
    2fd8:	39 0b       	sbc	r19, r25
    2fda:	4a 0b       	sbc	r20, r26
    2fdc:	5b 0b       	sbc	r21, r27
    2fde:	da 01       	movw	r26, r20
    2fe0:	c9 01       	movw	r24, r18
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	af 83       	std	Y+7, r26	; 0x07
    2fe8:	b8 87       	std	Y+8, r27	; 0x08
	}

	return module ;
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	af 81       	ldd	r26, Y+7	; 0x07
    2ff0:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	2c 96       	adiw	r28, 0x0c	; 12
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	08 95       	ret

00003010 <__mulsi3>:
    3010:	62 9f       	mul	r22, r18
    3012:	d0 01       	movw	r26, r0
    3014:	73 9f       	mul	r23, r19
    3016:	f0 01       	movw	r30, r0
    3018:	82 9f       	mul	r24, r18
    301a:	e0 0d       	add	r30, r0
    301c:	f1 1d       	adc	r31, r1
    301e:	64 9f       	mul	r22, r20
    3020:	e0 0d       	add	r30, r0
    3022:	f1 1d       	adc	r31, r1
    3024:	92 9f       	mul	r25, r18
    3026:	f0 0d       	add	r31, r0
    3028:	83 9f       	mul	r24, r19
    302a:	f0 0d       	add	r31, r0
    302c:	74 9f       	mul	r23, r20
    302e:	f0 0d       	add	r31, r0
    3030:	65 9f       	mul	r22, r21
    3032:	f0 0d       	add	r31, r0
    3034:	99 27       	eor	r25, r25
    3036:	72 9f       	mul	r23, r18
    3038:	b0 0d       	add	r27, r0
    303a:	e1 1d       	adc	r30, r1
    303c:	f9 1f       	adc	r31, r25
    303e:	63 9f       	mul	r22, r19
    3040:	b0 0d       	add	r27, r0
    3042:	e1 1d       	adc	r30, r1
    3044:	f9 1f       	adc	r31, r25
    3046:	bd 01       	movw	r22, r26
    3048:	cf 01       	movw	r24, r30
    304a:	11 24       	eor	r1, r1
    304c:	08 95       	ret

0000304e <__divmodhi4>:
    304e:	97 fb       	bst	r25, 7
    3050:	09 2e       	mov	r0, r25
    3052:	07 26       	eor	r0, r23
    3054:	0a d0       	rcall	.+20     	; 0x306a <__divmodhi4_neg1>
    3056:	77 fd       	sbrc	r23, 7
    3058:	04 d0       	rcall	.+8      	; 0x3062 <__divmodhi4_neg2>
    305a:	27 d0       	rcall	.+78     	; 0x30aa <__udivmodhi4>
    305c:	06 d0       	rcall	.+12     	; 0x306a <__divmodhi4_neg1>
    305e:	00 20       	and	r0, r0
    3060:	1a f4       	brpl	.+6      	; 0x3068 <__divmodhi4_exit>

00003062 <__divmodhi4_neg2>:
    3062:	70 95       	com	r23
    3064:	61 95       	neg	r22
    3066:	7f 4f       	sbci	r23, 0xFF	; 255

00003068 <__divmodhi4_exit>:
    3068:	08 95       	ret

0000306a <__divmodhi4_neg1>:
    306a:	f6 f7       	brtc	.-4      	; 0x3068 <__divmodhi4_exit>
    306c:	90 95       	com	r25
    306e:	81 95       	neg	r24
    3070:	9f 4f       	sbci	r25, 0xFF	; 255
    3072:	08 95       	ret

00003074 <__divmodsi4>:
    3074:	97 fb       	bst	r25, 7
    3076:	09 2e       	mov	r0, r25
    3078:	05 26       	eor	r0, r21
    307a:	0e d0       	rcall	.+28     	; 0x3098 <__divmodsi4_neg1>
    307c:	57 fd       	sbrc	r21, 7
    307e:	04 d0       	rcall	.+8      	; 0x3088 <__divmodsi4_neg2>
    3080:	28 d0       	rcall	.+80     	; 0x30d2 <__udivmodsi4>
    3082:	0a d0       	rcall	.+20     	; 0x3098 <__divmodsi4_neg1>
    3084:	00 1c       	adc	r0, r0
    3086:	38 f4       	brcc	.+14     	; 0x3096 <__divmodsi4_exit>

00003088 <__divmodsi4_neg2>:
    3088:	50 95       	com	r21
    308a:	40 95       	com	r20
    308c:	30 95       	com	r19
    308e:	21 95       	neg	r18
    3090:	3f 4f       	sbci	r19, 0xFF	; 255
    3092:	4f 4f       	sbci	r20, 0xFF	; 255
    3094:	5f 4f       	sbci	r21, 0xFF	; 255

00003096 <__divmodsi4_exit>:
    3096:	08 95       	ret

00003098 <__divmodsi4_neg1>:
    3098:	f6 f7       	brtc	.-4      	; 0x3096 <__divmodsi4_exit>
    309a:	90 95       	com	r25
    309c:	80 95       	com	r24
    309e:	70 95       	com	r23
    30a0:	61 95       	neg	r22
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	8f 4f       	sbci	r24, 0xFF	; 255
    30a6:	9f 4f       	sbci	r25, 0xFF	; 255
    30a8:	08 95       	ret

000030aa <__udivmodhi4>:
    30aa:	aa 1b       	sub	r26, r26
    30ac:	bb 1b       	sub	r27, r27
    30ae:	51 e1       	ldi	r21, 0x11	; 17
    30b0:	07 c0       	rjmp	.+14     	; 0x30c0 <__udivmodhi4_ep>

000030b2 <__udivmodhi4_loop>:
    30b2:	aa 1f       	adc	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	a6 17       	cp	r26, r22
    30b8:	b7 07       	cpc	r27, r23
    30ba:	10 f0       	brcs	.+4      	; 0x30c0 <__udivmodhi4_ep>
    30bc:	a6 1b       	sub	r26, r22
    30be:	b7 0b       	sbc	r27, r23

000030c0 <__udivmodhi4_ep>:
    30c0:	88 1f       	adc	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	5a 95       	dec	r21
    30c6:	a9 f7       	brne	.-22     	; 0x30b2 <__udivmodhi4_loop>
    30c8:	80 95       	com	r24
    30ca:	90 95       	com	r25
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	08 95       	ret

000030d2 <__udivmodsi4>:
    30d2:	a1 e2       	ldi	r26, 0x21	; 33
    30d4:	1a 2e       	mov	r1, r26
    30d6:	aa 1b       	sub	r26, r26
    30d8:	bb 1b       	sub	r27, r27
    30da:	fd 01       	movw	r30, r26
    30dc:	0d c0       	rjmp	.+26     	; 0x30f8 <__udivmodsi4_ep>

000030de <__udivmodsi4_loop>:
    30de:	aa 1f       	adc	r26, r26
    30e0:	bb 1f       	adc	r27, r27
    30e2:	ee 1f       	adc	r30, r30
    30e4:	ff 1f       	adc	r31, r31
    30e6:	a2 17       	cp	r26, r18
    30e8:	b3 07       	cpc	r27, r19
    30ea:	e4 07       	cpc	r30, r20
    30ec:	f5 07       	cpc	r31, r21
    30ee:	20 f0       	brcs	.+8      	; 0x30f8 <__udivmodsi4_ep>
    30f0:	a2 1b       	sub	r26, r18
    30f2:	b3 0b       	sbc	r27, r19
    30f4:	e4 0b       	sbc	r30, r20
    30f6:	f5 0b       	sbc	r31, r21

000030f8 <__udivmodsi4_ep>:
    30f8:	66 1f       	adc	r22, r22
    30fa:	77 1f       	adc	r23, r23
    30fc:	88 1f       	adc	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	1a 94       	dec	r1
    3102:	69 f7       	brne	.-38     	; 0x30de <__udivmodsi4_loop>
    3104:	60 95       	com	r22
    3106:	70 95       	com	r23
    3108:	80 95       	com	r24
    310a:	90 95       	com	r25
    310c:	9b 01       	movw	r18, r22
    310e:	ac 01       	movw	r20, r24
    3110:	bd 01       	movw	r22, r26
    3112:	cf 01       	movw	r24, r30
    3114:	08 95       	ret

00003116 <__prologue_saves__>:
    3116:	2f 92       	push	r2
    3118:	3f 92       	push	r3
    311a:	4f 92       	push	r4
    311c:	5f 92       	push	r5
    311e:	6f 92       	push	r6
    3120:	7f 92       	push	r7
    3122:	8f 92       	push	r8
    3124:	9f 92       	push	r9
    3126:	af 92       	push	r10
    3128:	bf 92       	push	r11
    312a:	cf 92       	push	r12
    312c:	df 92       	push	r13
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	ca 1b       	sub	r28, r26
    3140:	db 0b       	sbc	r29, r27
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	09 94       	ijmp

0000314e <__epilogue_restores__>:
    314e:	2a 88       	ldd	r2, Y+18	; 0x12
    3150:	39 88       	ldd	r3, Y+17	; 0x11
    3152:	48 88       	ldd	r4, Y+16	; 0x10
    3154:	5f 84       	ldd	r5, Y+15	; 0x0f
    3156:	6e 84       	ldd	r6, Y+14	; 0x0e
    3158:	7d 84       	ldd	r7, Y+13	; 0x0d
    315a:	8c 84       	ldd	r8, Y+12	; 0x0c
    315c:	9b 84       	ldd	r9, Y+11	; 0x0b
    315e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3160:	b9 84       	ldd	r11, Y+9	; 0x09
    3162:	c8 84       	ldd	r12, Y+8	; 0x08
    3164:	df 80       	ldd	r13, Y+7	; 0x07
    3166:	ee 80       	ldd	r14, Y+6	; 0x06
    3168:	fd 80       	ldd	r15, Y+5	; 0x05
    316a:	0c 81       	ldd	r16, Y+4	; 0x04
    316c:	1b 81       	ldd	r17, Y+3	; 0x03
    316e:	aa 81       	ldd	r26, Y+2	; 0x02
    3170:	b9 81       	ldd	r27, Y+1	; 0x01
    3172:	ce 0f       	add	r28, r30
    3174:	d1 1d       	adc	r29, r1
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	ed 01       	movw	r28, r26
    3182:	08 95       	ret

00003184 <sprintf>:
    3184:	ae e0       	ldi	r26, 0x0E	; 14
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e8 ec       	ldi	r30, 0xC8	; 200
    318a:	f8 e1       	ldi	r31, 0x18	; 24
    318c:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__prologue_saves__+0x1c>
    3190:	0d 89       	ldd	r16, Y+21	; 0x15
    3192:	1e 89       	ldd	r17, Y+22	; 0x16
    3194:	86 e0       	ldi	r24, 0x06	; 6
    3196:	8c 83       	std	Y+4, r24	; 0x04
    3198:	1a 83       	std	Y+2, r17	; 0x02
    319a:	09 83       	std	Y+1, r16	; 0x01
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	9f e7       	ldi	r25, 0x7F	; 127
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	9e 01       	movw	r18, r28
    31a6:	27 5e       	subi	r18, 0xE7	; 231
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
    31aa:	ce 01       	movw	r24, r28
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	6f 89       	ldd	r22, Y+23	; 0x17
    31b0:	78 8d       	ldd	r23, Y+24	; 0x18
    31b2:	a9 01       	movw	r20, r18
    31b4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <vfprintf>
    31b8:	2f 81       	ldd	r18, Y+7	; 0x07
    31ba:	38 85       	ldd	r19, Y+8	; 0x08
    31bc:	02 0f       	add	r16, r18
    31be:	13 1f       	adc	r17, r19
    31c0:	f8 01       	movw	r30, r16
    31c2:	10 82       	st	Z, r1
    31c4:	2e 96       	adiw	r28, 0x0e	; 14
    31c6:	e4 e0       	ldi	r30, 0x04	; 4
    31c8:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__epilogue_restores__+0x1c>

000031cc <vfprintf>:
    31cc:	ab e0       	ldi	r26, 0x0B	; 11
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	ec ee       	ldi	r30, 0xEC	; 236
    31d2:	f8 e1       	ldi	r31, 0x18	; 24
    31d4:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__>
    31d8:	3c 01       	movw	r6, r24
    31da:	2b 01       	movw	r4, r22
    31dc:	5a 01       	movw	r10, r20
    31de:	fc 01       	movw	r30, r24
    31e0:	17 82       	std	Z+7, r1	; 0x07
    31e2:	16 82       	std	Z+6, r1	; 0x06
    31e4:	83 81       	ldd	r24, Z+3	; 0x03
    31e6:	81 fd       	sbrc	r24, 1
    31e8:	03 c0       	rjmp	.+6      	; 0x31f0 <vfprintf+0x24>
    31ea:	6f ef       	ldi	r22, 0xFF	; 255
    31ec:	7f ef       	ldi	r23, 0xFF	; 255
    31ee:	c6 c1       	rjmp	.+908    	; 0x357c <vfprintf+0x3b0>
    31f0:	9a e0       	ldi	r25, 0x0A	; 10
    31f2:	89 2e       	mov	r8, r25
    31f4:	1e 01       	movw	r2, r28
    31f6:	08 94       	sec
    31f8:	21 1c       	adc	r2, r1
    31fa:	31 1c       	adc	r3, r1
    31fc:	f3 01       	movw	r30, r6
    31fe:	23 81       	ldd	r18, Z+3	; 0x03
    3200:	f2 01       	movw	r30, r4
    3202:	23 fd       	sbrc	r18, 3
    3204:	85 91       	lpm	r24, Z+
    3206:	23 ff       	sbrs	r18, 3
    3208:	81 91       	ld	r24, Z+
    320a:	2f 01       	movw	r4, r30
    320c:	88 23       	and	r24, r24
    320e:	09 f4       	brne	.+2      	; 0x3212 <vfprintf+0x46>
    3210:	b2 c1       	rjmp	.+868    	; 0x3576 <vfprintf+0x3aa>
    3212:	85 32       	cpi	r24, 0x25	; 37
    3214:	39 f4       	brne	.+14     	; 0x3224 <vfprintf+0x58>
    3216:	23 fd       	sbrc	r18, 3
    3218:	85 91       	lpm	r24, Z+
    321a:	23 ff       	sbrs	r18, 3
    321c:	81 91       	ld	r24, Z+
    321e:	2f 01       	movw	r4, r30
    3220:	85 32       	cpi	r24, 0x25	; 37
    3222:	29 f4       	brne	.+10     	; 0x322e <vfprintf+0x62>
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	b3 01       	movw	r22, r6
    3228:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    322c:	e7 cf       	rjmp	.-50     	; 0x31fc <vfprintf+0x30>
    322e:	98 2f       	mov	r25, r24
    3230:	ff 24       	eor	r15, r15
    3232:	ee 24       	eor	r14, r14
    3234:	99 24       	eor	r9, r9
    3236:	ff e1       	ldi	r31, 0x1F	; 31
    3238:	ff 15       	cp	r31, r15
    323a:	d0 f0       	brcs	.+52     	; 0x3270 <vfprintf+0xa4>
    323c:	9b 32       	cpi	r25, 0x2B	; 43
    323e:	69 f0       	breq	.+26     	; 0x325a <vfprintf+0x8e>
    3240:	9c 32       	cpi	r25, 0x2C	; 44
    3242:	28 f4       	brcc	.+10     	; 0x324e <vfprintf+0x82>
    3244:	90 32       	cpi	r25, 0x20	; 32
    3246:	59 f0       	breq	.+22     	; 0x325e <vfprintf+0x92>
    3248:	93 32       	cpi	r25, 0x23	; 35
    324a:	91 f4       	brne	.+36     	; 0x3270 <vfprintf+0xa4>
    324c:	0e c0       	rjmp	.+28     	; 0x326a <vfprintf+0x9e>
    324e:	9d 32       	cpi	r25, 0x2D	; 45
    3250:	49 f0       	breq	.+18     	; 0x3264 <vfprintf+0x98>
    3252:	90 33       	cpi	r25, 0x30	; 48
    3254:	69 f4       	brne	.+26     	; 0x3270 <vfprintf+0xa4>
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	24 c0       	rjmp	.+72     	; 0x32a2 <vfprintf+0xd6>
    325a:	52 e0       	ldi	r21, 0x02	; 2
    325c:	f5 2a       	or	r15, r21
    325e:	84 e0       	ldi	r24, 0x04	; 4
    3260:	f8 2a       	or	r15, r24
    3262:	28 c0       	rjmp	.+80     	; 0x32b4 <vfprintf+0xe8>
    3264:	98 e0       	ldi	r25, 0x08	; 8
    3266:	f9 2a       	or	r15, r25
    3268:	25 c0       	rjmp	.+74     	; 0x32b4 <vfprintf+0xe8>
    326a:	e0 e1       	ldi	r30, 0x10	; 16
    326c:	fe 2a       	or	r15, r30
    326e:	22 c0       	rjmp	.+68     	; 0x32b4 <vfprintf+0xe8>
    3270:	f7 fc       	sbrc	r15, 7
    3272:	29 c0       	rjmp	.+82     	; 0x32c6 <vfprintf+0xfa>
    3274:	89 2f       	mov	r24, r25
    3276:	80 53       	subi	r24, 0x30	; 48
    3278:	8a 30       	cpi	r24, 0x0A	; 10
    327a:	70 f4       	brcc	.+28     	; 0x3298 <vfprintf+0xcc>
    327c:	f6 fe       	sbrs	r15, 6
    327e:	05 c0       	rjmp	.+10     	; 0x328a <vfprintf+0xbe>
    3280:	98 9c       	mul	r9, r8
    3282:	90 2c       	mov	r9, r0
    3284:	11 24       	eor	r1, r1
    3286:	98 0e       	add	r9, r24
    3288:	15 c0       	rjmp	.+42     	; 0x32b4 <vfprintf+0xe8>
    328a:	e8 9c       	mul	r14, r8
    328c:	e0 2c       	mov	r14, r0
    328e:	11 24       	eor	r1, r1
    3290:	e8 0e       	add	r14, r24
    3292:	f0 e2       	ldi	r31, 0x20	; 32
    3294:	ff 2a       	or	r15, r31
    3296:	0e c0       	rjmp	.+28     	; 0x32b4 <vfprintf+0xe8>
    3298:	9e 32       	cpi	r25, 0x2E	; 46
    329a:	29 f4       	brne	.+10     	; 0x32a6 <vfprintf+0xda>
    329c:	f6 fc       	sbrc	r15, 6
    329e:	6b c1       	rjmp	.+726    	; 0x3576 <vfprintf+0x3aa>
    32a0:	40 e4       	ldi	r20, 0x40	; 64
    32a2:	f4 2a       	or	r15, r20
    32a4:	07 c0       	rjmp	.+14     	; 0x32b4 <vfprintf+0xe8>
    32a6:	9c 36       	cpi	r25, 0x6C	; 108
    32a8:	19 f4       	brne	.+6      	; 0x32b0 <vfprintf+0xe4>
    32aa:	50 e8       	ldi	r21, 0x80	; 128
    32ac:	f5 2a       	or	r15, r21
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <vfprintf+0xe8>
    32b0:	98 36       	cpi	r25, 0x68	; 104
    32b2:	49 f4       	brne	.+18     	; 0x32c6 <vfprintf+0xfa>
    32b4:	f2 01       	movw	r30, r4
    32b6:	23 fd       	sbrc	r18, 3
    32b8:	95 91       	lpm	r25, Z+
    32ba:	23 ff       	sbrs	r18, 3
    32bc:	91 91       	ld	r25, Z+
    32be:	2f 01       	movw	r4, r30
    32c0:	99 23       	and	r25, r25
    32c2:	09 f0       	breq	.+2      	; 0x32c6 <vfprintf+0xfa>
    32c4:	b8 cf       	rjmp	.-144    	; 0x3236 <vfprintf+0x6a>
    32c6:	89 2f       	mov	r24, r25
    32c8:	85 54       	subi	r24, 0x45	; 69
    32ca:	83 30       	cpi	r24, 0x03	; 3
    32cc:	18 f0       	brcs	.+6      	; 0x32d4 <vfprintf+0x108>
    32ce:	80 52       	subi	r24, 0x20	; 32
    32d0:	83 30       	cpi	r24, 0x03	; 3
    32d2:	38 f4       	brcc	.+14     	; 0x32e2 <vfprintf+0x116>
    32d4:	44 e0       	ldi	r20, 0x04	; 4
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	a4 0e       	add	r10, r20
    32da:	b5 1e       	adc	r11, r21
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	59 83       	std	Y+1, r21	; 0x01
    32e0:	0f c0       	rjmp	.+30     	; 0x3300 <vfprintf+0x134>
    32e2:	93 36       	cpi	r25, 0x63	; 99
    32e4:	31 f0       	breq	.+12     	; 0x32f2 <vfprintf+0x126>
    32e6:	93 37       	cpi	r25, 0x73	; 115
    32e8:	79 f0       	breq	.+30     	; 0x3308 <vfprintf+0x13c>
    32ea:	93 35       	cpi	r25, 0x53	; 83
    32ec:	09 f0       	breq	.+2      	; 0x32f0 <vfprintf+0x124>
    32ee:	56 c0       	rjmp	.+172    	; 0x339c <vfprintf+0x1d0>
    32f0:	20 c0       	rjmp	.+64     	; 0x3332 <vfprintf+0x166>
    32f2:	f5 01       	movw	r30, r10
    32f4:	80 81       	ld	r24, Z
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	42 e0       	ldi	r20, 0x02	; 2
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	a4 0e       	add	r10, r20
    32fe:	b5 1e       	adc	r11, r21
    3300:	61 01       	movw	r12, r2
    3302:	01 e0       	ldi	r16, 0x01	; 1
    3304:	10 e0       	ldi	r17, 0x00	; 0
    3306:	12 c0       	rjmp	.+36     	; 0x332c <vfprintf+0x160>
    3308:	f5 01       	movw	r30, r10
    330a:	c0 80       	ld	r12, Z
    330c:	d1 80       	ldd	r13, Z+1	; 0x01
    330e:	f6 fc       	sbrc	r15, 6
    3310:	03 c0       	rjmp	.+6      	; 0x3318 <vfprintf+0x14c>
    3312:	6f ef       	ldi	r22, 0xFF	; 255
    3314:	7f ef       	ldi	r23, 0xFF	; 255
    3316:	02 c0       	rjmp	.+4      	; 0x331c <vfprintf+0x150>
    3318:	69 2d       	mov	r22, r9
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	42 e0       	ldi	r20, 0x02	; 2
    331e:	50 e0       	ldi	r21, 0x00	; 0
    3320:	a4 0e       	add	r10, r20
    3322:	b5 1e       	adc	r11, r21
    3324:	c6 01       	movw	r24, r12
    3326:	0e 94 ce 1a 	call	0x359c	; 0x359c <strnlen>
    332a:	8c 01       	movw	r16, r24
    332c:	5f e7       	ldi	r21, 0x7F	; 127
    332e:	f5 22       	and	r15, r21
    3330:	14 c0       	rjmp	.+40     	; 0x335a <vfprintf+0x18e>
    3332:	f5 01       	movw	r30, r10
    3334:	c0 80       	ld	r12, Z
    3336:	d1 80       	ldd	r13, Z+1	; 0x01
    3338:	f6 fc       	sbrc	r15, 6
    333a:	03 c0       	rjmp	.+6      	; 0x3342 <vfprintf+0x176>
    333c:	6f ef       	ldi	r22, 0xFF	; 255
    333e:	7f ef       	ldi	r23, 0xFF	; 255
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <vfprintf+0x17a>
    3342:	69 2d       	mov	r22, r9
    3344:	70 e0       	ldi	r23, 0x00	; 0
    3346:	42 e0       	ldi	r20, 0x02	; 2
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	a4 0e       	add	r10, r20
    334c:	b5 1e       	adc	r11, r21
    334e:	c6 01       	movw	r24, r12
    3350:	0e 94 c3 1a 	call	0x3586	; 0x3586 <strnlen_P>
    3354:	8c 01       	movw	r16, r24
    3356:	50 e8       	ldi	r21, 0x80	; 128
    3358:	f5 2a       	or	r15, r21
    335a:	f3 fe       	sbrs	r15, 3
    335c:	07 c0       	rjmp	.+14     	; 0x336c <vfprintf+0x1a0>
    335e:	1a c0       	rjmp	.+52     	; 0x3394 <vfprintf+0x1c8>
    3360:	80 e2       	ldi	r24, 0x20	; 32
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	b3 01       	movw	r22, r6
    3366:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    336a:	ea 94       	dec	r14
    336c:	8e 2d       	mov	r24, r14
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	08 17       	cp	r16, r24
    3372:	19 07       	cpc	r17, r25
    3374:	a8 f3       	brcs	.-22     	; 0x3360 <vfprintf+0x194>
    3376:	0e c0       	rjmp	.+28     	; 0x3394 <vfprintf+0x1c8>
    3378:	f6 01       	movw	r30, r12
    337a:	f7 fc       	sbrc	r15, 7
    337c:	85 91       	lpm	r24, Z+
    337e:	f7 fe       	sbrs	r15, 7
    3380:	81 91       	ld	r24, Z+
    3382:	6f 01       	movw	r12, r30
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	b3 01       	movw	r22, r6
    3388:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    338c:	e1 10       	cpse	r14, r1
    338e:	ea 94       	dec	r14
    3390:	01 50       	subi	r16, 0x01	; 1
    3392:	10 40       	sbci	r17, 0x00	; 0
    3394:	01 15       	cp	r16, r1
    3396:	11 05       	cpc	r17, r1
    3398:	79 f7       	brne	.-34     	; 0x3378 <vfprintf+0x1ac>
    339a:	ea c0       	rjmp	.+468    	; 0x3570 <vfprintf+0x3a4>
    339c:	94 36       	cpi	r25, 0x64	; 100
    339e:	11 f0       	breq	.+4      	; 0x33a4 <vfprintf+0x1d8>
    33a0:	99 36       	cpi	r25, 0x69	; 105
    33a2:	69 f5       	brne	.+90     	; 0x33fe <vfprintf+0x232>
    33a4:	f7 fe       	sbrs	r15, 7
    33a6:	08 c0       	rjmp	.+16     	; 0x33b8 <vfprintf+0x1ec>
    33a8:	f5 01       	movw	r30, r10
    33aa:	20 81       	ld	r18, Z
    33ac:	31 81       	ldd	r19, Z+1	; 0x01
    33ae:	42 81       	ldd	r20, Z+2	; 0x02
    33b0:	53 81       	ldd	r21, Z+3	; 0x03
    33b2:	84 e0       	ldi	r24, 0x04	; 4
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0a c0       	rjmp	.+20     	; 0x33cc <vfprintf+0x200>
    33b8:	f5 01       	movw	r30, r10
    33ba:	80 81       	ld	r24, Z
    33bc:	91 81       	ldd	r25, Z+1	; 0x01
    33be:	9c 01       	movw	r18, r24
    33c0:	44 27       	eor	r20, r20
    33c2:	37 fd       	sbrc	r19, 7
    33c4:	40 95       	com	r20
    33c6:	54 2f       	mov	r21, r20
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	a8 0e       	add	r10, r24
    33ce:	b9 1e       	adc	r11, r25
    33d0:	9f e6       	ldi	r25, 0x6F	; 111
    33d2:	f9 22       	and	r15, r25
    33d4:	57 ff       	sbrs	r21, 7
    33d6:	09 c0       	rjmp	.+18     	; 0x33ea <vfprintf+0x21e>
    33d8:	50 95       	com	r21
    33da:	40 95       	com	r20
    33dc:	30 95       	com	r19
    33de:	21 95       	neg	r18
    33e0:	3f 4f       	sbci	r19, 0xFF	; 255
    33e2:	4f 4f       	sbci	r20, 0xFF	; 255
    33e4:	5f 4f       	sbci	r21, 0xFF	; 255
    33e6:	e0 e8       	ldi	r30, 0x80	; 128
    33e8:	fe 2a       	or	r15, r30
    33ea:	ca 01       	movw	r24, r20
    33ec:	b9 01       	movw	r22, r18
    33ee:	a1 01       	movw	r20, r2
    33f0:	2a e0       	ldi	r18, 0x0A	; 10
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	0e 94 05 1b 	call	0x360a	; 0x360a <__ultoa_invert>
    33f8:	d8 2e       	mov	r13, r24
    33fa:	d2 18       	sub	r13, r2
    33fc:	40 c0       	rjmp	.+128    	; 0x347e <vfprintf+0x2b2>
    33fe:	95 37       	cpi	r25, 0x75	; 117
    3400:	29 f4       	brne	.+10     	; 0x340c <vfprintf+0x240>
    3402:	1f 2d       	mov	r17, r15
    3404:	1f 7e       	andi	r17, 0xEF	; 239
    3406:	2a e0       	ldi	r18, 0x0A	; 10
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	1d c0       	rjmp	.+58     	; 0x3446 <vfprintf+0x27a>
    340c:	1f 2d       	mov	r17, r15
    340e:	19 7f       	andi	r17, 0xF9	; 249
    3410:	9f 36       	cpi	r25, 0x6F	; 111
    3412:	61 f0       	breq	.+24     	; 0x342c <vfprintf+0x260>
    3414:	90 37       	cpi	r25, 0x70	; 112
    3416:	20 f4       	brcc	.+8      	; 0x3420 <vfprintf+0x254>
    3418:	98 35       	cpi	r25, 0x58	; 88
    341a:	09 f0       	breq	.+2      	; 0x341e <vfprintf+0x252>
    341c:	ac c0       	rjmp	.+344    	; 0x3576 <vfprintf+0x3aa>
    341e:	0f c0       	rjmp	.+30     	; 0x343e <vfprintf+0x272>
    3420:	90 37       	cpi	r25, 0x70	; 112
    3422:	39 f0       	breq	.+14     	; 0x3432 <vfprintf+0x266>
    3424:	98 37       	cpi	r25, 0x78	; 120
    3426:	09 f0       	breq	.+2      	; 0x342a <vfprintf+0x25e>
    3428:	a6 c0       	rjmp	.+332    	; 0x3576 <vfprintf+0x3aa>
    342a:	04 c0       	rjmp	.+8      	; 0x3434 <vfprintf+0x268>
    342c:	28 e0       	ldi	r18, 0x08	; 8
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	0a c0       	rjmp	.+20     	; 0x3446 <vfprintf+0x27a>
    3432:	10 61       	ori	r17, 0x10	; 16
    3434:	14 fd       	sbrc	r17, 4
    3436:	14 60       	ori	r17, 0x04	; 4
    3438:	20 e1       	ldi	r18, 0x10	; 16
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	04 c0       	rjmp	.+8      	; 0x3446 <vfprintf+0x27a>
    343e:	14 fd       	sbrc	r17, 4
    3440:	16 60       	ori	r17, 0x06	; 6
    3442:	20 e1       	ldi	r18, 0x10	; 16
    3444:	32 e0       	ldi	r19, 0x02	; 2
    3446:	17 ff       	sbrs	r17, 7
    3448:	08 c0       	rjmp	.+16     	; 0x345a <vfprintf+0x28e>
    344a:	f5 01       	movw	r30, r10
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	44 e0       	ldi	r20, 0x04	; 4
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	08 c0       	rjmp	.+16     	; 0x346a <vfprintf+0x29e>
    345a:	f5 01       	movw	r30, r10
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	bc 01       	movw	r22, r24
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	42 e0       	ldi	r20, 0x02	; 2
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	a4 0e       	add	r10, r20
    346c:	b5 1e       	adc	r11, r21
    346e:	a1 01       	movw	r20, r2
    3470:	0e 94 05 1b 	call	0x360a	; 0x360a <__ultoa_invert>
    3474:	d8 2e       	mov	r13, r24
    3476:	d2 18       	sub	r13, r2
    3478:	8f e7       	ldi	r24, 0x7F	; 127
    347a:	f8 2e       	mov	r15, r24
    347c:	f1 22       	and	r15, r17
    347e:	f6 fe       	sbrs	r15, 6
    3480:	0b c0       	rjmp	.+22     	; 0x3498 <vfprintf+0x2cc>
    3482:	5e ef       	ldi	r21, 0xFE	; 254
    3484:	f5 22       	and	r15, r21
    3486:	d9 14       	cp	r13, r9
    3488:	38 f4       	brcc	.+14     	; 0x3498 <vfprintf+0x2cc>
    348a:	f4 fe       	sbrs	r15, 4
    348c:	07 c0       	rjmp	.+14     	; 0x349c <vfprintf+0x2d0>
    348e:	f2 fc       	sbrc	r15, 2
    3490:	05 c0       	rjmp	.+10     	; 0x349c <vfprintf+0x2d0>
    3492:	8f ee       	ldi	r24, 0xEF	; 239
    3494:	f8 22       	and	r15, r24
    3496:	02 c0       	rjmp	.+4      	; 0x349c <vfprintf+0x2d0>
    3498:	1d 2d       	mov	r17, r13
    349a:	01 c0       	rjmp	.+2      	; 0x349e <vfprintf+0x2d2>
    349c:	19 2d       	mov	r17, r9
    349e:	f4 fe       	sbrs	r15, 4
    34a0:	0d c0       	rjmp	.+26     	; 0x34bc <vfprintf+0x2f0>
    34a2:	fe 01       	movw	r30, r28
    34a4:	ed 0d       	add	r30, r13
    34a6:	f1 1d       	adc	r31, r1
    34a8:	80 81       	ld	r24, Z
    34aa:	80 33       	cpi	r24, 0x30	; 48
    34ac:	19 f4       	brne	.+6      	; 0x34b4 <vfprintf+0x2e8>
    34ae:	99 ee       	ldi	r25, 0xE9	; 233
    34b0:	f9 22       	and	r15, r25
    34b2:	08 c0       	rjmp	.+16     	; 0x34c4 <vfprintf+0x2f8>
    34b4:	1f 5f       	subi	r17, 0xFF	; 255
    34b6:	f2 fe       	sbrs	r15, 2
    34b8:	05 c0       	rjmp	.+10     	; 0x34c4 <vfprintf+0x2f8>
    34ba:	03 c0       	rjmp	.+6      	; 0x34c2 <vfprintf+0x2f6>
    34bc:	8f 2d       	mov	r24, r15
    34be:	86 78       	andi	r24, 0x86	; 134
    34c0:	09 f0       	breq	.+2      	; 0x34c4 <vfprintf+0x2f8>
    34c2:	1f 5f       	subi	r17, 0xFF	; 255
    34c4:	0f 2d       	mov	r16, r15
    34c6:	f3 fc       	sbrc	r15, 3
    34c8:	14 c0       	rjmp	.+40     	; 0x34f2 <vfprintf+0x326>
    34ca:	f0 fe       	sbrs	r15, 0
    34cc:	0f c0       	rjmp	.+30     	; 0x34ec <vfprintf+0x320>
    34ce:	1e 15       	cp	r17, r14
    34d0:	10 f0       	brcs	.+4      	; 0x34d6 <vfprintf+0x30a>
    34d2:	9d 2c       	mov	r9, r13
    34d4:	0b c0       	rjmp	.+22     	; 0x34ec <vfprintf+0x320>
    34d6:	9d 2c       	mov	r9, r13
    34d8:	9e 0c       	add	r9, r14
    34da:	91 1a       	sub	r9, r17
    34dc:	1e 2d       	mov	r17, r14
    34de:	06 c0       	rjmp	.+12     	; 0x34ec <vfprintf+0x320>
    34e0:	80 e2       	ldi	r24, 0x20	; 32
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	b3 01       	movw	r22, r6
    34e6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    34ea:	1f 5f       	subi	r17, 0xFF	; 255
    34ec:	1e 15       	cp	r17, r14
    34ee:	c0 f3       	brcs	.-16     	; 0x34e0 <vfprintf+0x314>
    34f0:	04 c0       	rjmp	.+8      	; 0x34fa <vfprintf+0x32e>
    34f2:	1e 15       	cp	r17, r14
    34f4:	10 f4       	brcc	.+4      	; 0x34fa <vfprintf+0x32e>
    34f6:	e1 1a       	sub	r14, r17
    34f8:	01 c0       	rjmp	.+2      	; 0x34fc <vfprintf+0x330>
    34fa:	ee 24       	eor	r14, r14
    34fc:	04 ff       	sbrs	r16, 4
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <vfprintf+0x352>
    3500:	80 e3       	ldi	r24, 0x30	; 48
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	b3 01       	movw	r22, r6
    3506:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    350a:	02 ff       	sbrs	r16, 2
    350c:	1d c0       	rjmp	.+58     	; 0x3548 <vfprintf+0x37c>
    350e:	01 fd       	sbrc	r16, 1
    3510:	03 c0       	rjmp	.+6      	; 0x3518 <vfprintf+0x34c>
    3512:	88 e7       	ldi	r24, 0x78	; 120
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e c0       	rjmp	.+28     	; 0x3534 <vfprintf+0x368>
    3518:	88 e5       	ldi	r24, 0x58	; 88
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	0b c0       	rjmp	.+22     	; 0x3534 <vfprintf+0x368>
    351e:	80 2f       	mov	r24, r16
    3520:	86 78       	andi	r24, 0x86	; 134
    3522:	91 f0       	breq	.+36     	; 0x3548 <vfprintf+0x37c>
    3524:	01 ff       	sbrs	r16, 1
    3526:	02 c0       	rjmp	.+4      	; 0x352c <vfprintf+0x360>
    3528:	8b e2       	ldi	r24, 0x2B	; 43
    352a:	01 c0       	rjmp	.+2      	; 0x352e <vfprintf+0x362>
    352c:	80 e2       	ldi	r24, 0x20	; 32
    352e:	f7 fc       	sbrc	r15, 7
    3530:	8d e2       	ldi	r24, 0x2D	; 45
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	b3 01       	movw	r22, r6
    3536:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    353a:	06 c0       	rjmp	.+12     	; 0x3548 <vfprintf+0x37c>
    353c:	80 e3       	ldi	r24, 0x30	; 48
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	b3 01       	movw	r22, r6
    3542:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    3546:	9a 94       	dec	r9
    3548:	d9 14       	cp	r13, r9
    354a:	c0 f3       	brcs	.-16     	; 0x353c <vfprintf+0x370>
    354c:	da 94       	dec	r13
    354e:	f1 01       	movw	r30, r2
    3550:	ed 0d       	add	r30, r13
    3552:	f1 1d       	adc	r31, r1
    3554:	80 81       	ld	r24, Z
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	b3 01       	movw	r22, r6
    355a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    355e:	dd 20       	and	r13, r13
    3560:	a9 f7       	brne	.-22     	; 0x354c <vfprintf+0x380>
    3562:	06 c0       	rjmp	.+12     	; 0x3570 <vfprintf+0x3a4>
    3564:	80 e2       	ldi	r24, 0x20	; 32
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	b3 01       	movw	r22, r6
    356a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <fputc>
    356e:	ea 94       	dec	r14
    3570:	ee 20       	and	r14, r14
    3572:	c1 f7       	brne	.-16     	; 0x3564 <vfprintf+0x398>
    3574:	43 ce       	rjmp	.-890    	; 0x31fc <vfprintf+0x30>
    3576:	f3 01       	movw	r30, r6
    3578:	66 81       	ldd	r22, Z+6	; 0x06
    357a:	77 81       	ldd	r23, Z+7	; 0x07
    357c:	cb 01       	movw	r24, r22
    357e:	2b 96       	adiw	r28, 0x0b	; 11
    3580:	e2 e1       	ldi	r30, 0x12	; 18
    3582:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__>

00003586 <strnlen_P>:
    3586:	fc 01       	movw	r30, r24
    3588:	05 90       	lpm	r0, Z+
    358a:	61 50       	subi	r22, 0x01	; 1
    358c:	70 40       	sbci	r23, 0x00	; 0
    358e:	01 10       	cpse	r0, r1
    3590:	d8 f7       	brcc	.-10     	; 0x3588 <strnlen_P+0x2>
    3592:	80 95       	com	r24
    3594:	90 95       	com	r25
    3596:	8e 0f       	add	r24, r30
    3598:	9f 1f       	adc	r25, r31
    359a:	08 95       	ret

0000359c <strnlen>:
    359c:	fc 01       	movw	r30, r24
    359e:	61 50       	subi	r22, 0x01	; 1
    35a0:	70 40       	sbci	r23, 0x00	; 0
    35a2:	01 90       	ld	r0, Z+
    35a4:	01 10       	cpse	r0, r1
    35a6:	d8 f7       	brcc	.-10     	; 0x359e <strnlen+0x2>
    35a8:	80 95       	com	r24
    35aa:	90 95       	com	r25
    35ac:	8e 0f       	add	r24, r30
    35ae:	9f 1f       	adc	r25, r31
    35b0:	08 95       	ret

000035b2 <fputc>:
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	8c 01       	movw	r16, r24
    35bc:	eb 01       	movw	r28, r22
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	81 ff       	sbrs	r24, 1
    35c2:	1b c0       	rjmp	.+54     	; 0x35fa <fputc+0x48>
    35c4:	82 ff       	sbrs	r24, 2
    35c6:	0d c0       	rjmp	.+26     	; 0x35e2 <fputc+0x30>
    35c8:	2e 81       	ldd	r18, Y+6	; 0x06
    35ca:	3f 81       	ldd	r19, Y+7	; 0x07
    35cc:	8c 81       	ldd	r24, Y+4	; 0x04
    35ce:	9d 81       	ldd	r25, Y+5	; 0x05
    35d0:	28 17       	cp	r18, r24
    35d2:	39 07       	cpc	r19, r25
    35d4:	64 f4       	brge	.+24     	; 0x35ee <fputc+0x3c>
    35d6:	e8 81       	ld	r30, Y
    35d8:	f9 81       	ldd	r31, Y+1	; 0x01
    35da:	01 93       	st	Z+, r16
    35dc:	f9 83       	std	Y+1, r31	; 0x01
    35de:	e8 83       	st	Y, r30
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <fputc+0x3c>
    35e2:	e8 85       	ldd	r30, Y+8	; 0x08
    35e4:	f9 85       	ldd	r31, Y+9	; 0x09
    35e6:	80 2f       	mov	r24, r16
    35e8:	09 95       	icall
    35ea:	89 2b       	or	r24, r25
    35ec:	31 f4       	brne	.+12     	; 0x35fa <fputc+0x48>
    35ee:	8e 81       	ldd	r24, Y+6	; 0x06
    35f0:	9f 81       	ldd	r25, Y+7	; 0x07
    35f2:	01 96       	adiw	r24, 0x01	; 1
    35f4:	9f 83       	std	Y+7, r25	; 0x07
    35f6:	8e 83       	std	Y+6, r24	; 0x06
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <fputc+0x4c>
    35fa:	0f ef       	ldi	r16, 0xFF	; 255
    35fc:	1f ef       	ldi	r17, 0xFF	; 255
    35fe:	c8 01       	movw	r24, r16
    3600:	df 91       	pop	r29
    3602:	cf 91       	pop	r28
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
    3608:	08 95       	ret

0000360a <__ultoa_invert>:
    360a:	fa 01       	movw	r30, r20
    360c:	aa 27       	eor	r26, r26
    360e:	28 30       	cpi	r18, 0x08	; 8
    3610:	51 f1       	breq	.+84     	; 0x3666 <__ultoa_invert+0x5c>
    3612:	20 31       	cpi	r18, 0x10	; 16
    3614:	81 f1       	breq	.+96     	; 0x3676 <__ultoa_invert+0x6c>
    3616:	e8 94       	clt
    3618:	6f 93       	push	r22
    361a:	6e 7f       	andi	r22, 0xFE	; 254
    361c:	6e 5f       	subi	r22, 0xFE	; 254
    361e:	7f 4f       	sbci	r23, 0xFF	; 255
    3620:	8f 4f       	sbci	r24, 0xFF	; 255
    3622:	9f 4f       	sbci	r25, 0xFF	; 255
    3624:	af 4f       	sbci	r26, 0xFF	; 255
    3626:	b1 e0       	ldi	r27, 0x01	; 1
    3628:	3e d0       	rcall	.+124    	; 0x36a6 <__ultoa_invert+0x9c>
    362a:	b4 e0       	ldi	r27, 0x04	; 4
    362c:	3c d0       	rcall	.+120    	; 0x36a6 <__ultoa_invert+0x9c>
    362e:	67 0f       	add	r22, r23
    3630:	78 1f       	adc	r23, r24
    3632:	89 1f       	adc	r24, r25
    3634:	9a 1f       	adc	r25, r26
    3636:	a1 1d       	adc	r26, r1
    3638:	68 0f       	add	r22, r24
    363a:	79 1f       	adc	r23, r25
    363c:	8a 1f       	adc	r24, r26
    363e:	91 1d       	adc	r25, r1
    3640:	a1 1d       	adc	r26, r1
    3642:	6a 0f       	add	r22, r26
    3644:	71 1d       	adc	r23, r1
    3646:	81 1d       	adc	r24, r1
    3648:	91 1d       	adc	r25, r1
    364a:	a1 1d       	adc	r26, r1
    364c:	20 d0       	rcall	.+64     	; 0x368e <__ultoa_invert+0x84>
    364e:	09 f4       	brne	.+2      	; 0x3652 <__ultoa_invert+0x48>
    3650:	68 94       	set
    3652:	3f 91       	pop	r19
    3654:	2a e0       	ldi	r18, 0x0A	; 10
    3656:	26 9f       	mul	r18, r22
    3658:	11 24       	eor	r1, r1
    365a:	30 19       	sub	r19, r0
    365c:	30 5d       	subi	r19, 0xD0	; 208
    365e:	31 93       	st	Z+, r19
    3660:	de f6       	brtc	.-74     	; 0x3618 <__ultoa_invert+0xe>
    3662:	cf 01       	movw	r24, r30
    3664:	08 95       	ret
    3666:	46 2f       	mov	r20, r22
    3668:	47 70       	andi	r20, 0x07	; 7
    366a:	40 5d       	subi	r20, 0xD0	; 208
    366c:	41 93       	st	Z+, r20
    366e:	b3 e0       	ldi	r27, 0x03	; 3
    3670:	0f d0       	rcall	.+30     	; 0x3690 <__ultoa_invert+0x86>
    3672:	c9 f7       	brne	.-14     	; 0x3666 <__ultoa_invert+0x5c>
    3674:	f6 cf       	rjmp	.-20     	; 0x3662 <__ultoa_invert+0x58>
    3676:	46 2f       	mov	r20, r22
    3678:	4f 70       	andi	r20, 0x0F	; 15
    367a:	40 5d       	subi	r20, 0xD0	; 208
    367c:	4a 33       	cpi	r20, 0x3A	; 58
    367e:	18 f0       	brcs	.+6      	; 0x3686 <__ultoa_invert+0x7c>
    3680:	49 5d       	subi	r20, 0xD9	; 217
    3682:	31 fd       	sbrc	r19, 1
    3684:	40 52       	subi	r20, 0x20	; 32
    3686:	41 93       	st	Z+, r20
    3688:	02 d0       	rcall	.+4      	; 0x368e <__ultoa_invert+0x84>
    368a:	a9 f7       	brne	.-22     	; 0x3676 <__ultoa_invert+0x6c>
    368c:	ea cf       	rjmp	.-44     	; 0x3662 <__ultoa_invert+0x58>
    368e:	b4 e0       	ldi	r27, 0x04	; 4
    3690:	a6 95       	lsr	r26
    3692:	97 95       	ror	r25
    3694:	87 95       	ror	r24
    3696:	77 95       	ror	r23
    3698:	67 95       	ror	r22
    369a:	ba 95       	dec	r27
    369c:	c9 f7       	brne	.-14     	; 0x3690 <__ultoa_invert+0x86>
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	61 05       	cpc	r22, r1
    36a2:	71 05       	cpc	r23, r1
    36a4:	08 95       	ret
    36a6:	9b 01       	movw	r18, r22
    36a8:	ac 01       	movw	r20, r24
    36aa:	0a 2e       	mov	r0, r26
    36ac:	06 94       	lsr	r0
    36ae:	57 95       	ror	r21
    36b0:	47 95       	ror	r20
    36b2:	37 95       	ror	r19
    36b4:	27 95       	ror	r18
    36b6:	ba 95       	dec	r27
    36b8:	c9 f7       	brne	.-14     	; 0x36ac <__ultoa_invert+0xa2>
    36ba:	62 0f       	add	r22, r18
    36bc:	73 1f       	adc	r23, r19
    36be:	84 1f       	adc	r24, r20
    36c0:	95 1f       	adc	r25, r21
    36c2:	a0 1d       	adc	r26, r0
    36c4:	08 95       	ret

000036c6 <_exit>:
    36c6:	f8 94       	cli

000036c8 <__stop_program>:
    36c8:	ff cf       	rjmp	.-2      	; 0x36c8 <__stop_program>
